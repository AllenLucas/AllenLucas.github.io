<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Allen Lucas的后花园</title>
  
  <subtitle>强迫症码农</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://allenlucas.ml/"/>
  <updated>2021-06-22T07:15:44.182Z</updated>
  <id>http://allenlucas.ml/</id>
  
  <author>
    <name>Allen Lucas</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>MicroG 替代Google框架的可行性方案</title>
    <link href="http://allenlucas.ml/2021/06/22/microG-%E6%9B%BF%E4%BB%A3Google%E6%A1%86%E6%9E%B6%E7%9A%84%E5%8F%AF%E8%A1%8C%E6%80%A7%E6%96%B9%E6%A1%88/"/>
    <id>http://allenlucas.ml/2021/06/22/microG-替代Google框架的可行性方案/</id>
    <published>2021-06-22T03:15:51.000Z</published>
    <updated>2021-06-22T07:15:44.182Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>安装过<code>google</code>框架的人都知道，因为某些因素，导致框架会持续进行连接，会造成手机的耗电，除非24小时挂T。虽然当前可以达到这样的条件，但是<code>google</code>占用的内存对我这个4gRam的手机来说，也是一个不小的考验，于是便有了这篇文章</p></blockquote><p>许久之前便听闻<code>microG</code>项目，只不过一直以为没有达到正常使用的地步，再加上玩机次数越来越少，所以一直没有尝试。最近在酷安发现这么一篇<a href="https://www.coolapk.com/feed/21654891?shareKey=NmEyNTZiZmZkZmUxNjBkMDJjNjM~&amp;shareUid=1439113&amp;shareFrom=com.coolapk.market_11.0.3" target="_blank" rel="noopener">文章</a>，边想尝试把手机里的<code>google</code>给替换掉。中途还因为第一次安装不熟悉的关系导致手机卡第一屏，不得不刷机解决。那么这次便根据文章，在进行自己的过程进行总结。</p><h3 id="普通安装"><a href="#普通安装" class="headerlink" title="普通安装"></a>普通安装</h3><p>这里提供一下<code>microG</code>的下载地址:<a href="https://www.coolapk.com/feed/21654891?shareKey=NmEyNTZiZmZkZmUxNjBkMDJjNjM~&amp;shareUid=1439113&amp;shareFrom=com.coolapk.market_11.0.3" target="_blank" rel="noopener">下载地址</a>,里面主要用到<code>Services Core</code>，<code>Services framework Proxxy</code> ,<code>Store</code>,<code>DroidGuard Helper</code>,至于<code>UnifiedNlp</code> 我并没有安装，这个看个人需求</p><ul><li>步骤一：签名欺骗</li></ul><p>由于<code>Services Core</code> 与 <code>google play services</code> 包名一样，<code>Services Framework Proxy</code> 与 <code>google servies Framework</code> 包名一致，但是安装包的包名是不可能跟<code>google</code>官方一致的，所以需要进行签名欺骗，文章里使用的是一个<code>Xposed</code> 模块 <code>FakeGapps</code>,(个人猜想核心破解过的是否也可以进行安装呢)</p><ul><li>步骤二：安装<code>services Core</code></li></ul><p>安装<code>Services Core</code>，在这里可以进行一些总的管理，包括账号登录，注册<code>Fcm</code>等，其中有一项自检测功能，详细显示了哪些模块还不支持，只有全部勾选才可以正常使用</p><p><img src="http://pic.yupoo.com/l476849560/f2660a58/8e3c4354.jpeg" alt="自检测"></p><ul><li>步骤三：安装<code>Services Framework Proxy</code> </li><li>步骤四：安装 应用商店，如果不想使用<code>google</code>商店，那么安装<code>Store(Fake Store)</code> 进行伪装，使用其他应用商店进行操作</li><li>步骤五：转为系统<code>app</code></li></ul><p>根据上面步骤操作后，基本完成安装，但是作为替换<code>Google</code>框架来说，应该赋予它更高的权限，尤其是<code>DroidGuard Helper</code> 需要作为系统应用安装，<code>Services Core</code> 需要作为系统应用来实现自启动，不被误杀等更高的权限，所以需要将用户应用转化为系统应用，用到<code>Magisk</code>模块 <code>App Systemizer(Terminal Emulator)</code>,然后使用终端模拟器进行操作，执行</p><p><code>su</code> 命令，然后执行<code>systemize</code>,然后会出现下图的显示，选择1，等待列出所有用户<code>app</code>，选择将其中的<code>Services Core</code>,<code>Services Framework Proxy</code>,<code>DroidGuard Helper</code> 这3个软件转化到<code>/system/priv-app/</code>路径下，<img src="http://pic.yupoo.com/l476849560/c7a911ca/481ac3e8.jpeg" alt="终端模拟器"></p><ul><li>结束</li></ul><h3 id="Magisk-安装"><a href="#Magisk-安装" class="headerlink" title="Magisk 安装"></a><code>Magisk</code> 安装</h3><p>上述的安装会比较麻烦，还有一个方式是通过<code>Magisk</code>模块直接安装的方式，通过刷入<code>microG_Installer_Revived</code>模块，会直接将三件套安装到<code>/system/priv-app</code>的路径下</p><h3 id="NanoDroid"><a href="#NanoDroid" class="headerlink" title="NanoDroid"></a><code>NanoDroid</code></h3><p>文章也有提到这个项目，不过没有多研究，因此不深入</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;安装过&lt;code&gt;google&lt;/code&gt;框架的人都知道，因为某些因素，导致框架会持续进行连接，会造成手机的耗电，除非24小时挂T。虽然当前可以达到这样的条件，但是&lt;code&gt;google&lt;/code&gt;占用的内存对我这个4gRam的手机来说，也是
      
    
    </summary>
    
      <category term="MicroG" scheme="http://allenlucas.ml/categories/MicroG/"/>
    
    
  </entry>
  
  <entry>
    <title>Flutter路由传值</title>
    <link href="http://allenlucas.ml/2019/09/08/Flutter%E8%B7%AF%E7%94%B1%E4%BC%A0%E5%80%BC/"/>
    <id>http://allenlucas.ml/2019/09/08/Flutter路由传值/</id>
    <published>2019-09-08T02:54:24.000Z</published>
    <updated>2021-06-18T05:18:28.313Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>上篇文章简单介绍了下Flutter的路由管理，那么自然想到，单单是入栈出栈是不够的，就像Android中Activity的传值一样，Flutter肯定也要这种情况，那么就引出了本篇文章，Route的传值</p></blockquote><h2 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h2><p>让我们新建一个代码示例，来简单的描述下路由传值如何操作及处理</p><p>我们创建一个路由，需要接受上一个Route传过来的值并显示，然后点击返回按键会销毁页面，并将返回值返回上一个Route，<br><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TipRoute</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  TipRoute(&#123;Key key, <span class="meta">@required</span> <span class="keyword">this</span>.text&#125;) : <span class="keyword">super</span>(key: key);</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">String</span> text;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Scaffold(</span><br><span class="line">      appBar: AppBar(</span><br><span class="line">        title: Text(<span class="string">"提示"</span>),</span><br><span class="line">      ),</span><br><span class="line">      body: Padding(</span><br><span class="line">        padding: EdgeInsets.all(<span class="number">18</span>),</span><br><span class="line">        child: Center(</span><br><span class="line">          child: Column(</span><br><span class="line">            children: &lt;Widget&gt;[</span><br><span class="line">              Text(text),</span><br><span class="line">              RaisedButton(</span><br><span class="line">                onPressed: () =&gt; Navigator.pop(context, <span class="string">"我是返回值"</span>),</span><br><span class="line">                child: Text(<span class="string">"返回"</span>),</span><br><span class="line">              )</span><br><span class="line">            ],</span><br><span class="line">          ),</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>我们创建一个Route，按键打开上面我们创建的需要传入参数的Route，并且打开的Route销毁的时候，打印返回值<br><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RouteTestRoute</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Center(</span><br><span class="line">      child: RaisedButton(</span><br><span class="line">        onPressed: () <span class="keyword">async</span> &#123;</span><br><span class="line">          <span class="keyword">var</span> result = <span class="keyword">await</span> Navigator.push(</span><br><span class="line">            context,</span><br><span class="line">            MaterialPageRoute(builder: (context) &#123;</span><br><span class="line">              <span class="keyword">return</span> TipRoute(text: <span class="string">"我是提示xxxx"</span>);</span><br><span class="line">            &#125;),</span><br><span class="line">          );</span><br><span class="line">          <span class="built_in">print</span>(<span class="string">"路由返回值：<span class="subst">$result</span>"</span>);</span><br><span class="line">        &#125;,</span><br><span class="line">        child: Text(<span class="string">"打开提示页"</span>),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>提示文案，我是提示xxx是通过<code>TipRoute</code>的<code>text</code>参数传递过来的。我们可以通过等待<code>Navigator.push(...)</code>返回的<code>Future</code>来获取新路由的返回数据</p><p>在TipRoute中有两种返回方式，</p><pre><code>1. 导航栏左边的返回箭头，不会有返回值2. 中间的返回按钮，会走逻辑中传递的返回值</code></pre><p><code>var result = await Navigator.push(...)</code> 打开新的Route，并等待返回结果</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>通过简单的两个Route，涉及到了Route间参数的传递及返回值的接收，这是普通的Route操作，那么在Flutter中还有一个更直观的方式对Route进行管理，就是命名Route，那么下一篇文章，我们就来看一下这种简单便捷的Route操作方式。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;上篇文章简单介绍了下Flutter的路由管理，那么自然想到，单单是入栈出栈是不够的，就像Android中Activity的传值一样，Flutter肯定也要这种情况，那么就引出了本篇文章，Route的传值&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 
      
    
    </summary>
    
      <category term="Flutter" scheme="http://allenlucas.ml/categories/Flutter/"/>
    
    
  </entry>
  
  <entry>
    <title>Flutter 路由管理</title>
    <link href="http://allenlucas.ml/2019/09/07/Flutter-%E8%B7%AF%E7%94%B1%E7%AE%A1%E7%90%86/"/>
    <id>http://allenlucas.ml/2019/09/07/Flutter-路由管理/</id>
    <published>2019-09-07T02:48:47.000Z</published>
    <updated>2021-06-18T05:18:28.313Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>之前两篇文章，我们在新建的Flutter项目中初步接触了Flutter，并进行了简单的分析，接下来，是对Flutter中的路由管理，进行简单的学习</p></blockquote><h2 id="路由管理"><a href="#路由管理" class="headerlink" title="路由管理"></a>路由管理</h2><p>简单的来说，Flutter中的路由，相当于Android中的Activity，这里的路由管理，就是Android中，不同的Activity之间进行跳转。在Android中，打开关闭Activity都会有一个堆栈进行管理，而在Flutter中，也有一个路由栈，对Route进行入栈(push)，出栈(pop)的管理。</p><h2 id="简单举例"><a href="#简单举例" class="headerlink" title="简单举例"></a>简单举例</h2><p>新建一个Route，可以在main.dart文件下新建，也可以另外新建一个dart文件，不过不要忘记导包。这里我是重新建了一个dart文件，并新建了一个Route</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'package:flutter/material.dart'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NewRoute</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Scaffold(</span><br><span class="line">      appBar: AppBar(</span><br><span class="line">        title: Text(<span class="string">"This is a new Route"</span>),</span><br><span class="line">      ),</span><br><span class="line">      body: Center(</span><br><span class="line">        child: FlatButton(</span><br><span class="line">          child: Text(<span class="string">"This is a new Route body"</span>),</span><br><span class="line">          textColor: Colors.blue,</span><br><span class="line">          onPressed: ()&#123;</span><br><span class="line">            Navigator.pop(context);</span><br><span class="line">          &#125;,</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p><code>NewRoute</code>继承了无状态的Widget，返回了一个带导航栏的Widget，内容是居中显示的一个FlatButton，显示的文字是“This is a new Route body”,颜色是蓝色，点击事件的话，这里是<code>Navigator.pop(context)</code>,这里不具体的分析这个方法，只是说明一下作用，是让Route从路由栈中出栈。那么一个新的Route就完成了。</p><p>接下来是在之前的main.dart文件中进行一下修改，添加一个路由管理的按钮</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_MyHomePageState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">MyHomePage</span>&gt; </span>&#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Scaffold(</span><br><span class="line">      appBar: AppBar(...),</span><br><span class="line">      body: Center(</span><br><span class="line">        child: Column(</span><br><span class="line">          mainAxisAlignment: MainAxisAlignment.center,</span><br><span class="line">          children: &lt;Widget&gt;[</span><br><span class="line">            </span><br><span class="line">            ...</span><br><span class="line">            <span class="comment">//添加的代码</span></span><br><span class="line">            FlatButton(</span><br><span class="line">              child: Text(<span class="string">"open new route"</span>),</span><br><span class="line">              textColor: Colors.blue,</span><br><span class="line">              onPressed: () &#123;</span><br><span class="line">                Navigator.push(context, MaterialPageRoute(builder: (context) &#123;</span><br><span class="line">                  <span class="keyword">return</span> NewRoute();</span><br><span class="line">                &#125;));</span><br><span class="line">              &#125;,</span><br><span class="line">            ),</span><br><span class="line">          ],</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">     ...</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h3 id="分析-1"><a href="#分析-1" class="headerlink" title="分析"></a>分析</h3><p>简单说就是在body的子Widget下面，添加了一个FlatButton，文字是“open new route”，颜色是蓝色，点击方法是<br><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Navigator.push(context, MaterialPageRoute(builder: (context) &#123;</span><br><span class="line">    <span class="keyword">return</span> NewRoute();</span><br><span class="line">&#125;));</span><br></pre></td></tr></table></figure></p><p>作用是将一个Route入栈。</p><h2 id="MaterialPageRoute"><a href="#MaterialPageRoute" class="headerlink" title="MaterialPageRoute"></a>MaterialPageRoute</h2><p><code>MaterialPageRoute</code>继承自<code>PageRoute</code>类，<code>PageRoute</code>类是一个抽象类，表示占有整个屏幕空间的一个模态路由页面，它还定义了路由构建及切换时过渡动画的相关接口及属性。<code>MaterialPageRoute</code> 是<code>Material</code>组件库提供的组件，它可以针对不同平台，实现与平台页面切换动画风格一致的路由切换动画：</p><ul><li>对于Android，当打开新页面时，新的页面会从屏幕底部滑动到屏幕顶部；当关闭页面时，当前页面会从屏幕顶部滑动到屏幕底部后消失，同时上一个页面会显示到屏幕上。</li><li>对于iOS，当打开页面时，新的页面会从屏幕右侧边缘一致滑动到屏幕左边，直到新页面全部显示到屏幕上，而上一个页面则会从当前屏幕滑动到屏幕左侧而消失；当关闭页面时，正好相反，当前页面会从屏幕右侧滑出，同时上一个页面会从屏幕左侧滑入。</li></ul><p>简单说一下<code>MaterialPageRoute</code>类的构造函数<br><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">MaterialPageRoute(&#123;</span><br><span class="line">    WidgetBuilder builder,</span><br><span class="line">    RouteSettings settings,</span><br><span class="line">    <span class="built_in">bool</span> maintainState = <span class="keyword">true</span>,</span><br><span class="line">    <span class="built_in">bool</span> fullscreenDialog = <span class="keyword">false</span>,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p><code>builder</code> 是一个WidgetBuilder类型的回调函数，它的作用是构建路由页面的具体内容，返回值是一个widget。我们通常要实现此回调，返回新路由的实例。<br><code>settings</code>包含路由的配置信息，如路由名称、是否初始路由（首页）。<br><code>maintainState</code>默认情况下，当入栈一个新路由时，原来的路由仍然会被保存在内存中，如果想在路由没用的时候释放其所占用的所有资源，可以设置maintainState为false。<br><code>fullscreenDialog</code>表示新的路由页面是否是一个全屏的模态对话框，在iOS中，如果fullscreenDialog为true，新页面将会从屏幕底部滑入（而不是水平方向）。</p><h2 id="Navigator"><a href="#Navigator" class="headerlink" title="Navigator"></a>Navigator</h2><p>上面的入栈和出栈中，都有用到Navigator类，那么现在我们就来稍微分析一下这个类<br>是一个路由管理的组件，它提供了打开和退出路由页方法。Navigator通过一个栈来管理活动路由集合。通常当前屏幕显示的页面就是栈顶的路由。Navigator提供了一系列方法来管理路由栈，在此我们只介绍其最常用的两个方法：</p><h3 id="Future-push-BuildContext-context-Route-route"><a href="#Future-push-BuildContext-context-Route-route" class="headerlink" title="Future push(BuildContext context, Route route)"></a>Future push(BuildContext context, Route route)</h3><p>将给定的路由入栈（即打开新的页面），返回值是一个Future对象，用以接收新路由出栈（即关闭）时的返回数据。</p><h3 id="bool-pop-BuildContext-context-result"><a href="#bool-pop-BuildContext-context-result" class="headerlink" title="bool pop(BuildContext context, [ result ])"></a>bool pop(BuildContext context, [ result ])</h3><p>将栈顶路由出栈，result为页面关闭时返回给上一个页面的数据。</p><h2 id="实例方法"><a href="#实例方法" class="headerlink" title="实例方法"></a>实例方法</h2><p><code>Navigator</code>类中第一个参数为context的静态方法都对应一个Navigator的实例方法， 比如<code>Navigator.push(BuildContext context, Route route)</code>等价于<code>Navigator.of(context).push(Route route)</code> ，下面命名路由相关的方法也是一样的。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>Flutter中的路由管理，大致可以看作Android中的Activity堆栈的管理，后续类似Activity跳转动画和Activity间的传值，我想Flutter中应该也有相对应的实现。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;之前两篇文章，我们在新建的Flutter项目中初步接触了Flutter，并进行了简单的分析，接下来，是对Flutter中的路由管理，进行简单的学习&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;路由管理&quot;&gt;&lt;a href=&quot;#路由管理&quot; cl
      
    
    </summary>
    
      <category term="Flutter" scheme="http://allenlucas.ml/categories/Flutter/"/>
    
    
  </entry>
  
  <entry>
    <title>新建Flutter项目并分析</title>
    <link href="http://allenlucas.ml/2019/09/06/%E6%96%B0%E5%BB%BAFlutter%E9%A1%B9%E7%9B%AE%E5%B9%B6%E5%88%86%E6%9E%90/"/>
    <id>http://allenlucas.ml/2019/09/06/新建Flutter项目并分析/</id>
    <published>2019-09-06T14:44:17.000Z</published>
    <updated>2021-06-18T05:18:28.317Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><p>使用AndroidStudio创建一个新的Flutter项目，我们来对它进行分析</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p><code>main.dart</code>代码如下:<br><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'package:flutter/material.dart'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main() =&gt; runApp(MyApp());</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyApp</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="comment">// This widget is the root of your application.</span></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> MaterialApp(</span><br><span class="line">      title: <span class="string">'Flutter Demo'</span>,</span><br><span class="line">      theme: ThemeData(</span><br><span class="line">        <span class="comment">// This is the theme of your application.</span></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        <span class="comment">// Try running your application with "flutter run". You'll see the</span></span><br><span class="line">        <span class="comment">// application has a blue toolbar. Then, without quitting the app, try</span></span><br><span class="line">        <span class="comment">// changing the primarySwatch below to Colors.green and then invoke</span></span><br><span class="line">        <span class="comment">// "hot reload" (press "r" in the console where you ran "flutter run",</span></span><br><span class="line">        <span class="comment">// or simply save your changes to "hot reload" in a Flutter IDE).</span></span><br><span class="line">        <span class="comment">// Notice that the counter didn't reset back to zero; the application</span></span><br><span class="line">        <span class="comment">// is not restarted.</span></span><br><span class="line">        primarySwatch: Colors.blue,</span><br><span class="line">      ),</span><br><span class="line">      home: MyHomePage(title: <span class="string">'Flutter Demo Home Page'</span>),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyHomePage</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">  MyHomePage(&#123;Key key, <span class="keyword">this</span>.title&#125;) : <span class="keyword">super</span>(key: key);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// This widget is the home page of your application. It is stateful, meaning</span></span><br><span class="line">  <span class="comment">// that it has a State object (defined below) that contains fields that affect</span></span><br><span class="line">  <span class="comment">// how it looks.</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// This class is the configuration for the state. It holds the values (in this</span></span><br><span class="line">  <span class="comment">// case the title) provided by the parent (in this case the App widget) and</span></span><br><span class="line">  <span class="comment">// used by the build method of the State. Fields in a Widget subclass are</span></span><br><span class="line">  <span class="comment">// always marked "final".</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">String</span> title;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  _MyHomePageState createState() =&gt; _MyHomePageState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_MyHomePageState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">MyHomePage</span>&gt; </span>&#123;</span><br><span class="line">  <span class="built_in">int</span> _counter = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">void</span> _incrementCounter() &#123;</span><br><span class="line">    setState(() &#123;</span><br><span class="line">      <span class="comment">// This call to setState tells the Flutter framework that something has</span></span><br><span class="line">      <span class="comment">// changed in this State, which causes it to rerun the build method below</span></span><br><span class="line">      <span class="comment">// so that the display can reflect the updated values. If we changed</span></span><br><span class="line">      <span class="comment">// _counter without calling setState(), then the build method would not be</span></span><br><span class="line">      <span class="comment">// called again, and so nothing would appear to happen.</span></span><br><span class="line">      _counter++;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="comment">// This method is rerun every time setState is called, for instance as done</span></span><br><span class="line">    <span class="comment">// by the _incrementCounter method above.</span></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="comment">// The Flutter framework has been optimized to make rerunning build methods</span></span><br><span class="line">    <span class="comment">// fast, so that you can just rebuild anything that needs updating rather</span></span><br><span class="line">    <span class="comment">// than having to individually change instances of widgets.</span></span><br><span class="line">    <span class="keyword">return</span> Scaffold(</span><br><span class="line">      appBar: AppBar(</span><br><span class="line">        <span class="comment">// Here we take the value from the MyHomePage object that was created by</span></span><br><span class="line">        <span class="comment">// the App.build method, and use it to set our appbar title.</span></span><br><span class="line">        title: Text(widget.title),</span><br><span class="line">      ),</span><br><span class="line">      body: Center(</span><br><span class="line">        <span class="comment">// Center is a layout widget. It takes a single child and positions it</span></span><br><span class="line">        <span class="comment">// in the middle of the parent.</span></span><br><span class="line">        child: Column(</span><br><span class="line">          <span class="comment">// Column is also a layout widget. It takes a list of children and</span></span><br><span class="line">          <span class="comment">// arranges them vertically. By default, it sizes itself to fit its</span></span><br><span class="line">          <span class="comment">// children horizontally, and tries to be as tall as its parent.</span></span><br><span class="line">          <span class="comment">//</span></span><br><span class="line">          <span class="comment">// Invoke "debug painting" (press "p" in the console, choose the</span></span><br><span class="line">          <span class="comment">// "Toggle Debug Paint" action from the Flutter Inspector in Android</span></span><br><span class="line">          <span class="comment">// Studio, or the "Toggle Debug Paint" command in Visual Studio Code)</span></span><br><span class="line">          <span class="comment">// to see the wireframe for each widget.</span></span><br><span class="line">          <span class="comment">//</span></span><br><span class="line">          <span class="comment">// Column has various properties to control how it sizes itself and</span></span><br><span class="line">          <span class="comment">// how it positions its children. Here we use mainAxisAlignment to</span></span><br><span class="line">          <span class="comment">// center the children vertically; the main axis here is the vertical</span></span><br><span class="line">          <span class="comment">// axis because Columns are vertical (the cross axis would be</span></span><br><span class="line">          <span class="comment">// horizontal).</span></span><br><span class="line">          mainAxisAlignment: MainAxisAlignment.center,</span><br><span class="line">          children: &lt;Widget&gt;[</span><br><span class="line">            Text(</span><br><span class="line">              <span class="string">'You have pushed the button this many times:'</span>,</span><br><span class="line">            ),</span><br><span class="line">            Text(</span><br><span class="line">              <span class="string">'<span class="subst">$_counter</span>'</span>,</span><br><span class="line">              style: Theme.of(context).textTheme.display1,</span><br><span class="line">            ),</span><br><span class="line">          ],</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">      floatingActionButton: FloatingActionButton(</span><br><span class="line">        onPressed: _incrementCounter,</span><br><span class="line">        tooltip: <span class="string">'Increment'</span>,</span><br><span class="line">        child: Icon(Icons.add),</span><br><span class="line">      ), <span class="comment">// This trailing comma makes auto-formatting nicer for build methods.</span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><h3 id="导入包"><a href="#导入包" class="headerlink" title="导入包"></a>导入包</h3><p><code>import &#39;package:flutter/material.dart&#39;;</code> 这是一套标准的UI设计语言，是Google所大力推行的，包括原生Android都有Material风格的设计</p><h3 id="应用入口"><a href="#应用入口" class="headerlink" title="应用入口"></a>应用入口</h3><p><code>void main() =&gt; runApp(MyApp());</code> dart语言跟java语言一样，都有一个执行的入口方法，main()方法就是该入口。<br>该方法中的 =&gt; 符号，是Dart中当行函数或者方法的简写，所以，该方法也可以写为<br><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> main()&#123;</span><br><span class="line">  runApp(MyApp());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在Main方法中，运行了runApp方法，该方法的功能是启动Flutter应用。它接受一个Widget作为参数。<br>MyApp()是Flutter应用的根组件</p><h3 id="应用结构"><a href="#应用结构" class="headerlink" title="应用结构"></a>应用结构</h3><p>为了方便阅读，去掉了注释<br><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyApp</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> MaterialApp(</span><br><span class="line">      title: <span class="string">'Flutter Demo'</span>,</span><br><span class="line">      theme: ThemeData(</span><br><span class="line">        primarySwatch: Colors.blue,</span><br><span class="line">      ),</span><br><span class="line">      home: MyHomePage(title: <span class="string">'Flutter Demo Home Page'</span>),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>该类继承了<code>StatelessWidget</code>类而通过源码，可以看到<code>StatelessWidget</code>类又继承了<code>Widget</code>，所以，MyApp是一个<code>Widget</code></p><p>Flutter在构建页面的时候会调用<code>Widget</code>的build方法，在该方法中返回一个<code>Widget</code></p><p>当前方法中返回了一个<code>MaterialApp</code>的Widget。<code>MateruakApp</code>是Material库中提供的Flutter APP框架，通过它可以设置应用的名称、主题、语言、首页及路由列表等。</p><p><code>title</code>应用的名称<br><code>theme</code>应用的主题<br><code>home</code>应用的首页，是一个Widget，代码中返回的是<code>MyHomePage</code></p><h3 id="首页"><a href="#首页" class="headerlink" title="首页"></a>首页</h3><p>为了方便阅读，去掉了注释<br><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyHomePage</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">  MyHomePage(&#123;Key key, <span class="keyword">this</span>.title&#125;) : <span class="keyword">super</span>(key: key);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">String</span> title;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  _MyHomePageState createState() =&gt; _MyHomePageState();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><code>MyHomePage</code>继承了<code>StatefulWidget</code>表示是一个有状态的<code>Widget</code>，也是一个<code>Widget</code></p><h4 id="有状态的Widget和无状态的Widget"><a href="#有状态的Widget和无状态的Widget" class="headerlink" title="有状态的Widget和无状态的Widget"></a>有状态的Widget和无状态的Widget</h4><ul><li><code>StatelessWidget</code>表示无状态的Widget，状态不可变</li><li><code>StatefulWidget</code>表示有状态的Widget，状态在Widget的生命周期中是可变化的</li><li><code>Stateful Widget</code>至少有两个类来构成<ol><li>一个StatefulWidget类。</li><li>一个 State类； StatefulWidget类本身是不变的，但是State类中持有的状态在widget生命周期中可能会发生变化。</li></ol></li></ul><p>在<code>MyHomePage</code>中创建并返回了一个<code>_MyHomePageState</code>类<br><code>_MyHomePageState</code>类是<code>MyHomePage</code>类对应的状态类。</p><h3 id="State类"><a href="#State类" class="headerlink" title="State类"></a>State类</h3><p>为了便于阅读，去掉了注释<br><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_MyHomePageState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">MyHomePage</span>&gt; </span>&#123;</span><br><span class="line">  <span class="built_in">int</span> _counter = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">void</span> _incrementCounter() &#123;</span><br><span class="line">    setState(() &#123;</span><br><span class="line">      _counter++;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Scaffold(</span><br><span class="line">      appBar: AppBar(</span><br><span class="line">        title: Text(widget.title),</span><br><span class="line">      ),</span><br><span class="line">      body: Center(</span><br><span class="line">        child: Column(</span><br><span class="line">          mainAxisAlignment: MainAxisAlignment.center,</span><br><span class="line">          children: &lt;Widget&gt;[</span><br><span class="line">            Text(</span><br><span class="line">              <span class="string">'You have pushed the button this many times:'</span>,</span><br><span class="line">            ),</span><br><span class="line">            Text(</span><br><span class="line">              <span class="string">'<span class="subst">$_counter</span>'</span>,</span><br><span class="line">              style: Theme.of(context).textTheme.display1,</span><br><span class="line">            ),</span><br><span class="line">          ],</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">      floatingActionButton: FloatingActionButton(</span><br><span class="line">        onPressed: _incrementCounter,</span><br><span class="line">        tooltip: <span class="string">'Increment'</span>,</span><br><span class="line">        child: Icon(Icons.add),</span><br><span class="line">      ), </span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在该Widget中的build方法中返回了一个<code>Scaffold</code>，<br><code>Scaffold</code>是 Material组件库中提供的一个组件，它提供了默认的导航栏、标题和包含主屏幕widget树（后同“组件树”或“部件树”）的body属性。组件树可以很复杂。<br><code>appBar</code>是导航栏部分，下面的title，是应用的名称<br><code>body</code>是主要显示的内容部分，里面的是显示的Widget<br><code>floatingActionButton</code>是右下角浮动的按钮</p><p>该方法中，body是一个<code>Center</code>的组件，表示widget位置居中，它的子Widget是一个<code>Column</code></p><p><code>Column</code>的作用是将其所有子组件沿屏幕垂直方向依次排列</p><p>此例中Column子组件是两个 Text，第一个Text 显示固定文本 “You have pushed the button this many times:”，第二个Text 显示_counter状态的数值。</p><p>当点击<code>floatingActionButton</code>,会执行<code>_incrementCounter</code>方法，该方法会使的<code>_counter</code>值自增加，然后刷新状态重新构建UI。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>到此，第一个Flutter项目的分析就结束了。可以看出来，虽然是刚刚开始接触，但是其实还是有迹可寻的。只不过前期因为不熟练，可能会比较吃力，等会面熟悉了，应该会好很多。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;[TOC]&lt;/p&gt;
&lt;p&gt;使用AndroidStudio创建一个新的Flutter项目，我们来对它进行分析&lt;/p&gt;
&lt;h2 id=&quot;代码&quot;&gt;&lt;a href=&quot;#代码&quot; class=&quot;headerlink&quot; title=&quot;代码&quot;&gt;&lt;/a&gt;代码&lt;/h2&gt;&lt;p&gt;&lt;code&gt;mai
      
    
    </summary>
    
      <category term="Flutter" scheme="http://allenlucas.ml/categories/Flutter/"/>
    
    
  </entry>
  
  <entry>
    <title>Hello Flutter</title>
    <link href="http://allenlucas.ml/2019/09/06/Hello-Flutter/"/>
    <id>http://allenlucas.ml/2019/09/06/Hello-Flutter/</id>
    <published>2019-09-06T00:08:03.000Z</published>
    <updated>2021-06-18T05:18:28.314Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><blockquote><p>距离上次的更新又过去了半年，我这个懒癌还真的有点严重呢。时间跨度比较大，那么发生的事情也就比较多，现在的我，跟半年前的我相比，又有了很多变化，尤其是思想和心态上，这次想学一下Flutter，希望能拿出全身100%的努力，来做成这件事</p></blockquote><p>这半年发生了很多事，对我来说也算是一种磨难。之前一些想法现在也慢慢的在改变，感觉到了交流沟通的重要性，想改变自己在人际交往上的一些之前比较消极的观点和做法，我想变成一个全新的我，来迎接接下来遇到的困难和磨难。<br>目前Flutter正在愈演愈烈，各种文章满天飞，身在其中，我也想尝试下新的技术，今天从入门开始做起</p><h1 id="新的征程"><a href="#新的征程" class="headerlink" title="新的征程"></a>新的征程</h1><p>前人种树，后人乘凉。这次也是在前人的总结基础上，来总结学习Flutter，在Github上找到了开源的Flutter电子书，真的很感谢<br><a href="https://book.flutterchina.club/" target="_blank" rel="noopener">Flutter实战</a></p><h2 id="拥抱Flutter"><a href="#拥抱Flutter" class="headerlink" title="拥抱Flutter"></a>拥抱Flutter</h2><p>flutter的一些特性就不说了，这里开始搭建flutter的开发环境，让我们拥抱Flutter吧</p><ul><li>下载FlutterSDK<br>我这里使用的git <code>git clone -b master https://github.com/flutter/flutter.git</code></li><li>更新环境变量<br>在Path下，将 <code>flutter\bin</code> 的全路径添加到最后作为它的值，不要忘记与其他值使用；分隔开.</li><li>运行 flutter doctor命令<br>在Flutter命令行运行如下命令来查看是否还需要安装其它依赖，如果需要，安装它们<br>该命令检查你的环境并在命令行窗口中显示报告。Dart SDK已经在打包在Flutter SDK里了，没有必要单独安装Dart。 仔细检查命令行输出以获取可能需要安装的其他软件或进一步需要执行的任务。</li><li>AndroidStudio设置<br>下载安装Flutter插件和Dart插件，并重新运行</li></ul><p>如果一切都ok，那么接下来就可以新建一个Flutter项目并运行了</p><h2 id="遇到的一些问题"><a href="#遇到的一些问题" class="headerlink" title="遇到的一些问题"></a>遇到的一些问题</h2><ol><li>刚开始可能有在flutter项目下无法连接设备的情况出现，这个时候要看一下AndroidSDK是否配置好了</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;[TOC]&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;距离上次的更新又过去了半年，我这个懒癌还真的有点严重呢。时间跨度比较大，那么发生的事情也就比较多，现在的我，跟半年前的我相比，又有了很多变化，尤其是思想和心态上，这次想学一下Flutter，希望能拿出全身100%的努力，来
      
    
    </summary>
    
      <category term="Flutter" scheme="http://allenlucas.ml/categories/Flutter/"/>
    
    
  </entry>
  
  <entry>
    <title>SHV39 玩机</title>
    <link href="http://allenlucas.ml/2019/05/14/SHV39-%E7%8E%A9%E6%9C%BA/"/>
    <id>http://allenlucas.ml/2019/05/14/SHV39-玩机/</id>
    <published>2019-05-14T07:00:15.000Z</published>
    <updated>2021-06-18T05:18:28.315Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h2 id="无root，去除叉号，感叹号"><a href="#无root，去除叉号，感叹号" class="headerlink" title="无root，去除叉号，感叹号"></a>无root，去除叉号，感叹号</h2><ol><li>删除变量：（删除以后默认启用） <code>adb shell settings delete global captive_portal_mode</code></li><li>关闭检测：  <code>adb shell settings put global captive_portal_mode 0</code></li><li>查看当前状态：<code>adb shell settings get global captive_portal_mode</code></li><li>删除（删除默认用HTTPS）: <code>adb shell settings delete global captive_portal_https_url</code> <code>adb shell settings delete global captive_portal_http_url</code></li><li>分别修改两个地址 : <code>adb shell settings put global captive_portal_http_url http://captive.v2ex.co/generate_204</code> <code>adb shell settings put global captive_portal_https_url https://captive.v2ex.co/generate_204</code></li></ol><p>操作完毕，飞行模式切换下就可以了<br><img src="https://attach.bbs.miui.com/forum/201804/03/213805z55c55is5x3g5s5x.png.thumb.jpg" alt="此处输入图片的描述"></p><h2 id="日系手机升级"><a href="#日系手机升级" class="headerlink" title="日系手机升级"></a>日系手机升级</h2><ol><li>良好的wifi网络</li><li>良好的日本节点</li><li>SSR点击选项设置，勾选允许来自局域网的连接，去掉服务器负载均衡<br><img src="http://imgsrc.baidu.com/forum/w=580/sign=e105d952434a20a4311e3ccfa0529847/766d57166d224f4a82b7f25305f790529922d1df.jpg" alt="此处输入图片的描述"></li><li>然后电脑运行cmd 命令行ipconfig查询ip地址</li><li>手机连接同样的WiFi，手动修改，输入电脑的ip，及端口<br><img src="http://imgsrc.baidu.com/forum/w=580/sign=97fa14df22dda3cc0be4b82831e83905/b29f5f36acaf2edd7f00c4a9811001e938019310.jpg" alt="此处输入图片的描述"></li><li>SSR全部设置为全局（系统代理模式 or 代理规则）</li><li>等待wifi的叉号消失，去进行升级(OTA)</li><li>若无法更新，尝试恢复出厂设置</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;[TOC]&lt;/p&gt;
&lt;h2 id=&quot;无root，去除叉号，感叹号&quot;&gt;&lt;a href=&quot;#无root，去除叉号，感叹号&quot; class=&quot;headerlink&quot; title=&quot;无root，去除叉号，感叹号&quot;&gt;&lt;/a&gt;无root，去除叉号，感叹号&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;删除变
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>好久不见</title>
    <link href="http://allenlucas.ml/2019/05/14/%E5%A5%BD%E4%B9%85%E4%B8%8D%E8%A7%81/"/>
    <id>http://allenlucas.ml/2019/05/14/好久不见/</id>
    <published>2019-05-14T02:24:05.000Z</published>
    <updated>2021-06-18T05:18:28.316Z</updated>
    
    <content type="html"><![CDATA[<p>年后发生了许多事，也算是经历了被裁员。结婚的事也阻挠颇多，暂时搁置。人生有时候真的是挺不如意。好歹一切都过来了。新入职了家公司，挺正规，规模也还好，也比较规范。以前的我散漫惯了，需要适应。尤其是我粗心大意的毛病，对我而言是一大阻碍，务必要克服。因为对hexo不是很熟悉，年后写了几篇文章对于没有能够发到Blog上，这次也不知道可以不可以，试试，如果成功了，就一次性全部传上去，真的是断更太久了。好了，先这样吧。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;年后发生了许多事，也算是经历了被裁员。结婚的事也阻挠颇多，暂时搁置。人生有时候真的是挺不如意。好歹一切都过来了。新入职了家公司，挺正规，规模也还好，也比较规范。以前的我散漫惯了，需要适应。尤其是我粗心大意的毛病，对我而言是一大阻碍，务必要克服。因为对hexo不是很熟悉，年后
      
    
    </summary>
    
      <category term="随笔" scheme="http://allenlucas.ml/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
  </entry>
  
  <entry>
    <title>从零开始的Hexo个人博客搭建</title>
    <link href="http://allenlucas.ml/2019/01/10/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84Hexo%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    <id>http://allenlucas.ml/2019/01/10/从零开始的Hexo个人博客搭建/</id>
    <published>2019-01-10T05:40:15.000Z</published>
    <updated>2021-06-18T05:29:22.161Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>之前搭建的个人博客，但是各种各样的原因导致好久没有更新自己的博客，现在年底想写点东西保存下来，为明年找新工作做准备，但是好久没来，对Hexo博客的使用有点遗忘，特此从零开始，对Hexo搭建的步骤进行一次记录。<br>此次写作，完全参考了<a href="http://wuxiaolong.me/2015/07/31/build-blog-by-hexo/" title="手把手教你建github技术博客by hexo" target="_blank" rel="noopener">吴小龙同学-手把手教你建github技术博客by hexo</a>一文，说是转载也不为过，但是也有我从其他地方查找到的资料，特此声明。</p></blockquote><h3 id="警告"><a href="#警告" class="headerlink" title="警告"></a>警告</h3><p>一定要查看hexo版本和当前的nodeJs版本是否兼容，如我使用的hoxe版本为3.8.0，则使用的nodeJs版本最高为13.x，特此记录</p><h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><h4 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a>安装Git</h4><p><a href="https://git-scm.com/" title="Git官网" target="_blank" rel="noopener">git官网</a>下载并执行即可完成安装。</p><h4 id="安装Node-js"><a href="#安装Node-js" class="headerlink" title="安装Node.js"></a>安装Node.js</h4><p>在Windows环境下安装<a href="https://nodejs.org/en/" title="Node.js官网" target="_blank" rel="noopener">Node.js</a>非常简单，仅须下载安装文件并执行即可完成安装。</p><h4 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h4><p>利用npm命令即可安装。（在任意位置点击鼠标右键，选择Git bash）<br><code>npm install -g hexo</code></p><p><strong><em>问题</em></strong></p><ul><li>npm ERR!registry error parsing json错误</li></ul><p>可能需要设置npm代理，执行命令<br><code>npm config set registry  http://registry.cnpmjs.org</code></p><ul><li>hexo:command not found<br> 删除刚刚安装的npm目录，重新执行命令：<br> <code>npm install -g hexo</code><br> 来安装hexo。<h4 id="创建hexo文件夹"><a href="#创建hexo文件夹" class="headerlink" title="创建hexo文件夹"></a>创建hexo文件夹</h4>安装完成后，在你喜欢的文件夹下（如：H:\hexo），执行以下指令（在H:\hexo内点击鼠标右键，选择Git bash），Hexo即会自动在目标文件夹建立网站所需要的所有文件。<br><code>hexo init</code></li></ul><h4 id="安装依赖包"><a href="#安装依赖包" class="headerlink" title="安装依赖包"></a>安装依赖包</h4><p><code>npm install</code></p><h4 id="本地查看"><a href="#本地查看" class="headerlink" title="本地查看"></a>本地查看</h4><p>现在我们已经搭建起本地的hexo博客了，执行以下命令（在H:\hexo），然后到浏览器输入localhost:4000看看。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo generate</span><br><span class="line">hexo server</span><br></pre></td></tr></table></figure></p><p>至此，本地博客已经搭建起来了，当然，现在只是本地的，接下来我们要部署在Github。<br><strong><em>问题</em></strong></p><ul><li><p>执行hexo server提示找不到该指令<br> 解决办法：<br> 在Hexo 3.0后server被单独出来了，需要安装server，安装的命令如下：<br> <code>npm install hexo -server --save</code><br> 安装此server后再试，问题解决</p><h2 id="Github创建博客"><a href="#Github创建博客" class="headerlink" title="Github创建博客"></a>Github创建博客</h2><h4 id="创建页面仓库"><a href="#创建页面仓库" class="headerlink" title="创建页面仓库"></a>创建页面仓库</h4><p>这个仓库的名字需要和你的账号对应，格式：yourname.github.io<br>输入基本信息，然后点击创建仓库<img src="http://pic.yupoo.com/l476849560/dcb1f3f3/45658191.png" alt="此处输入图片的描述"><br><strong>注意</strong><br>命名规则:你的Github账号.github.io</p><h4 id="查看SSH"><a href="#查看SSH" class="headerlink" title="查看SSH"></a>查看SSH</h4><p>SSH公钥默认储存在账户的主目录下的~/.ssh目录。<br>进如.ssh目录下，命令行：<br><code>ls</code><br>查看，如果返回something和something.pub，说明已经有SSH公钥。</p><h4 id="生成SSH公钥"><a href="#生成SSH公钥" class="headerlink" title="生成SSH公钥"></a>生成SSH公钥</h4><p>没有的话，生成，还是在.ssh目录下，命令行：</p></li></ul><p><code>ssh-keygen -t rsa -C &quot;你的邮箱地址&quot;</code></p><p>  按3个回车，密码为空。<br>  在 C:\Users\Administrator.ssh 下，得到两个文件 id_rsa 和 id_rsa.pub。</p><h4 id="在Github上添加SSH密钥"><a href="#在Github上添加SSH密钥" class="headerlink" title="在Github上添加SSH密钥"></a>在Github上添加SSH密钥</h4><p>  打开id_rsa.pub，复制全文到<a href="https://github.com/settings/ssh" target="_blank" rel="noopener">https://github.com/settings/ssh</a>，Add SSH key粘贴进去</p><p>  ##hexo使用</p><h4 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">├── .deploy       #需要部署的文件</span><br><span class="line">├── node_modules  #Hexo插件</span><br><span class="line">├── public        #生成的静态网页文件</span><br><span class="line">├── scaffolds     #模板</span><br><span class="line">├── source        #博客正文和其他源文件，404、favicon、CNAME 都应该放在这里</span><br><span class="line">|   ├── _drafts   #草稿</span><br><span class="line">|   └── _posts    #文章</span><br><span class="line">├── themes        #主题</span><br><span class="line">├── _config.yml   #全局配置文件</span><br><span class="line">└── package.json</span><br></pre></td></tr></table></figure><p>全局配置_config.yml</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"># Hexo Configuration</span><br><span class="line"># Docs: http://hexo.io/docs/configuration.html</span><br><span class="line"># Source: https://github.com/hexojs/hexo/</span><br><span class="line"># Site #站点信息</span><br><span class="line">title:  #标题</span><br><span class="line">subtitle:  #副标题</span><br><span class="line">description:  #站点描述，给搜索引擎看的</span><br><span class="line">author:  #作者</span><br><span class="line">email:  #电子邮箱</span><br><span class="line">language: zh-CN #语言</span><br><span class="line"># URL #链接格式</span><br><span class="line">url:  #网址</span><br><span class="line">root: / #根目录</span><br><span class="line">permalink: :year/:month/:day/:title/ #文章的链接格式</span><br><span class="line">tag_dir: tags #标签目录</span><br><span class="line">archive_dir: archives #存档目录</span><br><span class="line">category_dir: categories #分类目录</span><br><span class="line">code_dir: downloads/code</span><br><span class="line">permalink_defaults:</span><br><span class="line"># Directory #目录</span><br><span class="line">source_dir: source #源文件目录</span><br><span class="line">public_dir: public #生成的网页文件目录</span><br><span class="line"># Writing #写作</span><br><span class="line">new_post_name: :title.md #新文章标题</span><br><span class="line">default_layout: post #默认的模板，包括 post、page、photo、draft（文章、页面、照片、草稿）</span><br><span class="line">titlecase: false #标题转换成大写</span><br><span class="line">external_link: true #在新选项卡中打开连接</span><br><span class="line">filename_case: 0</span><br><span class="line">render_drafts: false</span><br><span class="line">post_asset_folder: false</span><br><span class="line">relative_link: false</span><br><span class="line">highlight: #语法高亮</span><br><span class="line">  enable: true #是否启用</span><br><span class="line">  line_number: true #显示行号</span><br><span class="line">  tab_replace:</span><br><span class="line"># Category &amp; Tag #分类和标签</span><br><span class="line">default_category: uncategorized #默认分类</span><br><span class="line">category_map:</span><br><span class="line">tag_map:</span><br><span class="line"># Archives</span><br><span class="line">2: 开启分页</span><br><span class="line">1: 禁用分页</span><br><span class="line">0: 全部禁用</span><br><span class="line">archive: 2</span><br><span class="line">category: 2</span><br><span class="line">tag: 2</span><br><span class="line"># Server #本地服务器</span><br><span class="line">port: 4000 #端口号</span><br><span class="line">server_ip: localhost #IP 地址</span><br><span class="line">logger: false</span><br><span class="line">logger_format: dev</span><br><span class="line"># Date / Time format #日期时间格式</span><br><span class="line">date_format: YYYY-MM-DD #参考http://momentjs.com/docs/#/displaying/format/</span><br><span class="line">time_format: H:mm:ss</span><br><span class="line"># Pagination #分页</span><br><span class="line">per_page: 10 #每页文章数，设置成 0 禁用分页</span><br><span class="line">pagination_dir: page</span><br><span class="line"># Disqus #Disqus评论，替换为多说</span><br><span class="line">disqus_shortname:</span><br><span class="line"># Extensions #拓展插件</span><br><span class="line">theme: landscape-plus #主题</span><br><span class="line">exclude_generator:</span><br><span class="line">plugins: #插件，例如生成 RSS 和站点地图的</span><br><span class="line"> - hexo-generator-feed</span><br><span class="line"> - hexo-generator-sitemap</span><br><span class="line"># Deployment #部署，将 lmintlcx 改成用户名</span><br><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: 刚刚github创库地址.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><hr><p><strong>注意*</strong></p><ul><li>配置文件的冒号“:”后面有一个空格</li><li>repo: 刚刚 GitHub 创库地址.git</li></ul><h4 id="hexo命令行使用"><a href="#hexo命令行使用" class="headerlink" title="hexo命令行使用"></a>hexo命令行使用</h4><p>常用命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>简写：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">hexo n == hexo new</span><br><span class="line">hexo g == hexo generate</span><br><span class="line">hexo s == hexo server</span><br><span class="line">hexo d == hexo deploy</span><br></pre></td></tr></table></figure></p><h4 id="编辑文章"><a href="#编辑文章" class="headerlink" title="编辑文章"></a>编辑文章</h4><p>新建文章</p><p><code>hexo new &quot;标题&quot;</code></p><p>在 _posts 目录下会生成文件标题.md：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">title: Hello World</span><br><span class="line">date: 2019-01-10 07:56:29 #发表日期，一般不改动</span><br><span class="line">categories: hexo #文章文类</span><br><span class="line">tags: [hexo,github] #文章标签，多于一项时用这种格式</span><br><span class="line">---</span><br><span class="line">正文，使用 Markdown 语法书写</span><br></pre></td></tr></table></figure><p>编辑完后保存，hexo server预览</p><h4 id="hexo部署"><a href="#hexo部署" class="headerlink" title="hexo部署"></a>hexo部署</h4><p>执行下列指令即可完成部署</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo generate</span><br><span class="line">hexo deploy</span><br></pre></td></tr></table></figure><p>hexo deploy 问题：Deployer not found:git<br>执行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure></p><p>再重新hexo deploy，以下提示说明部署成功:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">o[info] Deploy done: git</span><br></pre></td></tr></table></figure></p><p>点击Github上项目的Settings，Github Pages，提示 Your site is published at <a href="http://allenlucas.ml">http://allenlucas.ml</a>(这是我自己申请的域名)</p><h4 id="更换电脑的Hexo使用"><a href="#更换电脑的Hexo使用" class="headerlink" title="更换电脑的Hexo使用"></a>更换电脑的Hexo使用</h4><p> 首先，在Github上新建一个hexo分支，然后在仓库的Settings中，选择默认分支为hexo。</p><p>然后在本地的任意目录下，打开git bash。</p><p><code>git clone git@github.com:xxxx.github.io.git</code></p><p>将其克隆到本地，因为默认分支已经设成了hexo，所以clone时只clone了hexo。</p><p>接下来在克隆到本地的<code>xxxx.github.io</code>中，把除了.git 文件夹外的所有文件都删掉</p><p>当前clone 的分支内，theme内的next是空文件，如果想要使用，需要从之前备份文件里的theme-&gt;next 拷贝过来，就可以了</p><p>把之前我们写的博客源文件全部复制过来，除了<code>.deploy_git</code>。这里应该说一句，复制过来的源文件应该有一个<code>.gitignore</code>，用来忽略一些不需要的文件，如果没有的话，自己新建一个，在里面写上如下，表示这些类型文件不需要git：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">.DS_Store</span><br><span class="line">Thumbs.db</span><br><span class="line">db.json</span><br><span class="line">*.log</span><br><span class="line">node_modules/</span><br><span class="line">public/</span><br><span class="line">.deploy*/</span><br></pre></td></tr></table></figure><p>注意，如果你之前克隆过theme中的主题文件，那么应该把主题文件中的<code>.git</code>文件夹删掉，因为git不能嵌套上传，最好是显示隐藏文件，检查一下有没有，否则上传的时候会出错，导致你的主题文件无法上传，这样你的配置在别的电脑上就用不了了。</p><p>而后</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit –m &quot;add branch&quot;</span><br><span class="line">git push</span><br></pre></td></tr></table></figure><p>这样就上传完了，可以去你的github上看一看hexo分支有没有上传上去，其中<code>node_modules</code>、<code>public</code>、<code>db.json</code>已经被忽略掉了，没有关系，不需要上传的，因为在别的电脑上需要重新输入命令安装 .</p><p>这样就上传完了</p><h4 id="更换电脑操作"><a href="#更换电脑操作" class="headerlink" title="更换电脑操作"></a>更换电脑操作</h4><p>直接在任意文件夹下，</p><p><code>git clone git@………………</code></p><p>然后进入克隆到的文件夹：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd xxx.github.io</span><br><span class="line">npm install</span><br><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>生成，部署</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><p>然后就可以写博客了。</p><h2 id="图床"><a href="#图床" class="headerlink" title="图床"></a>图床</h2><p><del>之前使用的七牛云存储来做图床，但是测试域名一个月后被收回，而我的域名是未备案的，pass。</del><br>目前再网上使用的<a href="https://x.yupoo.com/http://allenlucas.ml" target="_blank" rel="noopener">又拍图片管家</a>，目前是免费用户，感觉效果还可可以，后续有更好的再更新。</p><h2 id="域名"><a href="#域名" class="headerlink" title="域名"></a>域名</h2><p>我是在国外申请的一年免费域名，将就用</p><h2 id="DNS设置"><a href="#DNS设置" class="headerlink" title="DNS设置"></a>DNS设置</h2><p><del>使用<a href="http://www.cloudxns.net/" target="_blank" rel="noopener">CloudXNS</a>来进行解析，效果不错。免费服务已砍</del></p><p>目前使用华为云解析，感觉国内速度也还可以，不过没有找到像CloudXns那种的一些访问记录之类的数据，不过对这个也不是很在意。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;之前搭建的个人博客，但是各种各样的原因导致好久没有更新自己的博客，现在年底想写点东西保存下来，为明年找新工作做准备，但是好久没来，对Hexo博客的使用有点遗忘，特此从零开始，对Hexo搭建的步骤进行一次记录。&lt;br&gt;此次写作，完全参考了&lt;a hre
      
    
    </summary>
    
      <category term="Hexo" scheme="http://allenlucas.ml/categories/Hexo/"/>
    
    
  </entry>
  
  <entry>
    <title>Git简单介绍</title>
    <link href="http://allenlucas.ml/2018/10/11/Git%E7%AE%80%E5%8D%95%E4%BB%8B%E7%BB%8D/"/>
    <id>http://allenlucas.ml/2018/10/11/Git简单介绍/</id>
    <published>2018-10-11T05:15:27.000Z</published>
    <updated>2021-06-18T05:18:28.314Z</updated>
    
    <content type="html"><![CDATA[<div class="output_wrapper" id="output_wrapper_id" style="font-size: 15px; color: rgb(62, 62, 62); line-height: 1.8; word-spacing: 2px; letter-spacing: 2px; font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; background-image: linear-gradient(90deg, rgba(50, 0, 0, 0.05) 3%, rgba(0, 0, 0, 0) 3%), linear-gradient(360deg, rgba(50, 0, 0, 0.05) 3%, rgba(0, 0, 0, 0) 3%); background-size: 20px 20px; background-position: center center"><blockquote style="line-height: inherit; display: block; padding: 15px 15px 15px 1rem; font-size: 0.9em; margin: 1em 0px; color: rgb(0, 0, 0); border-left: 5px solid rgb(239, 112, 96); background: rgb(239, 235, 233); overflow: auto; word-wrap: normal; word-break: normal"><br>  <p style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 0px">本文摘自《第一行代码》第二版</p><br></blockquote><br><hr style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; height: 1px; margin: 1.5rem 0px; border-right: none; border-bottom: none; border-left: none; border-image: initial; border-top: 1px dashed rgb(165, 165, 165)"><br><blockquote style="line-height: inherit; display: block; padding: 15px 15px 15px 1rem; font-size: 0.9em; margin: 1em 0px; color: rgb(0, 0, 0); border-left: 5px solid rgb(239, 112, 96); background: rgb(239, 235, 233); overflow: auto; word-wrap: normal; word-break: normal"><br>  <p style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 0px">Git是一个开源的分布式版本控制工具，它的开发者就是鼎鼎大名的Linux操作系统的坐着Linus Torvalds。</p><br></blockquote><br><p style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px"><a href="https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; text-decoration: none; color: rgb(30, 107, 184); word-wrap: break-word" target="_blank" rel="noopener">更多Git使用可以查看廖雪峰老师的Git教程</a></p><br><p class="toc" id="tocid_0" style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px; margin-left: 25px"><span class="toc_item" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: block"><span class="toc_left" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-left: 25px"><a href="#h" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; text-decoration: none; color: rgb(30, 107, 184); word-wrap: break-word">初识版本控制工具</a></span></span><span class="toc_item" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: block"><span class="toc_left" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-left: 25px"><span class="toc_left" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-left: 25px"><a href="#hgit" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; text-decoration: none; color: rgb(30, 107, 184); word-wrap: break-word">安装Git</a></span></span></span><span class="toc_item" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: block"><span class="toc_left" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-left: 25px"><span class="toc_left" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-left: 25px"><a href="#h-1" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; text-decoration: none; color: rgb(30, 107, 184); word-wrap: break-word">创建代码仓库</a></span></span></span><span class="toc_item" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: block"><span class="toc_left" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-left: 25px"><span class="toc_left" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-left: 25px"><a href="#h-2" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; text-decoration: none; color: rgb(30, 107, 184); word-wrap: break-word">提交本地代码</a></span></span></span><span class="toc_item" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: block"><span class="toc_left" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-left: 25px"><span class="toc_left" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-left: 25px"><a href="#h-3" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; text-decoration: none; color: rgb(30, 107, 184); word-wrap: break-word">忽略文件</a></span></span></span><span class="toc_item" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: block"><span class="toc_left" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-left: 25px"><span class="toc_left" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-left: 25px"><a href="#h-4" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; text-decoration: none; color: rgb(30, 107, 184); word-wrap: break-word">查看修改内容</a></span></span></span><span class="toc_item" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: block"><span class="toc_left" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-left: 25px"><span class="toc_left" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-left: 25px"><a href="#h-5" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; text-decoration: none; color: rgb(30, 107, 184); word-wrap: break-word">撤销未提交的修改</a></span></span></span><span class="toc_item" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: block"><span class="toc_left" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-left: 25px"><span class="toc_left" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-left: 25px"><a href="#h-6" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; text-decoration: none; color: rgb(30, 107, 184); word-wrap: break-word">查看提交记录</a></span></span></span><span class="toc_item" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: block"><span class="toc_left" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-left: 25px"><span class="toc_left" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-left: 25px"><a href="#h-7" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; text-decoration: none; color: rgb(30, 107, 184); word-wrap: break-word">分支的用法</a></span></span></span><span class="toc_item" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: block"><span class="toc_left" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-left: 25px"><span class="toc_left" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-left: 25px"><a href="#h-8" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; text-decoration: none; color: rgb(30, 107, 184); word-wrap: break-word">与远程版本库协作</a></span></span></span></p><br><h1 id="h" style="color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.6em"><span style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px">初识版本控制工具</span></h1><br><h2 id="hgit" style="color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.4em"><span style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px">安装Git</span></h2><br><p style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px">如果使用的是Linux系统，比如Ubuntu系统，只需要打开shell界面，输入：<br><code style="font-size: inherit; line-height: inherit; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248)">sudo apt-get install git-core</code><br>按下回车后输入密码，即可完成Git的安装；<br>如果是使用的Windows操作系统，需要先去官网上把Git安装包下载下来，<a href="https://git-for-windows.github.io" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; text-decoration: none; color: rgb(30, 107, 184); word-wrap: break-word" target="_blank" rel="noopener">Git Windows版本下载地址</a>，然后安装就好了。</p><br><h2 id="h-1" style="color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.4em"><span style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px">创建代码仓库</span></h2><br><p style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px">尝试使用命令来使用Git，如果使用Linux系统，打开shell界面，如果使用Windows系统，打开GitBash</p><br><ol style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: decimal"><br><li style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em"><span style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px">首先应该配置身份，这样提交代码的时候Git就可以知道是谁提交的了；</span></li><br></ol><br><pre style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px"><code class="hljs coffeescript" style="margin: 0px 2px; line-height: 15px; font-size: 11px; font-weight: normal; word-spacing: -3px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; color: rgb(169, 183, 198); background: rgb(40, 43, 46); overflow-x: auto; padding: 0.5em; display: block !important; white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important"><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); padding-right: 20px; word-spacing: 0px; word-wrap: inherit !important; word-break: inherit !important">1</span>&nbsp;&nbsp;&nbsp;&nbsp;git&nbsp;config&nbsp;–<span class="hljs-built_in" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important">global</span>&nbsp;user.name&nbsp;<span class="hljs-string" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important">“xxx”</span><br><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); padding-right: 20px; word-spacing: 0px; word-wrap: inherit !important; word-break: inherit !important">2</span>&nbsp;&nbsp;&nbsp;&nbsp;git&nbsp;config&nbsp;–<span class="hljs-built_in" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important">global</span>&nbsp;user.email&nbsp;<span class="hljs-string" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important">“<a href="mailto:xxx@xxx.com" target="_blank" rel="noopener">xxx@xxx.com</a>“</span><br></code></pre><br><p style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px">配置完成后可以使用同样的命令来查看是否配置成功，只需要将最后的名字和邮箱地址去掉即可</p><br><ol start="2" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: decimal"><br><li style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em">创建代码仓库，仓库是用于保存版本管理所需信息的地方，所有本地提交的代码都会被提交到代码仓库中，如果有需要还可以再推送到远程仓库中。<br>先进入项目的目录下，再输入如下命令</li><br></ol><br><pre style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px"><code class="hljs nginx" style="margin: 0px 2px; line-height: 15px; font-size: 11px; font-weight: normal; word-spacing: -3px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; color: rgb(169, 183, 198); background: rgb(40, 43, 46); overflow-x: auto; padding: 0.5em; display: block !important; white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important"><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); padding-right: 20px; word-spacing: 0px; word-wrap: inherit !important; word-break: inherit !important">1</span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-attribute" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important">git</span>&nbsp;init<br></code></pre><br><p style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px">仓库创建完后，会在项目的根目录下生成一个隐藏的.git文件，这个文件夹就是用来记录本地所有的Git操作，可以通过ls -al命令来查看。如果想删除本地仓库，只需要删除这个文件夹就可以</p><br><h2 id="h-2" style="color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.4em"><span style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px">提交本地代码</span></h2><br><p style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px">代码仓库建立完之后就可以提交代码了，只需要使用add和commit命令就可以。add用于把想要提交的代码先添加进来，而commit则是真正地去执行提交操作，比如想添加build.gradle文件，就可以输入如下命令</p><br><pre style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px"><code class="hljs cs" style="margin: 0px 2px; line-height: 15px; font-size: 11px; font-weight: normal; word-spacing: -3px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; color: rgb(169, 183, 198); background: rgb(40, 43, 46); overflow-x: auto; padding: 0.5em; display: block !important; white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important"><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); padding-right: 20px; word-spacing: 0px; word-wrap: inherit !important; word-break: inherit !important">1</span>&nbsp;&nbsp;&nbsp;&nbsp;git&nbsp;<span class="hljs-keyword" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important">add</span>&nbsp;build.gradle<br></code></pre><br><p style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px">这是添加单个文件的方法，如果想添加某个目录，只需要在add后加上目录名即可，如将整个app目录下的所有文件都进行添加，可以输入</p><br><pre style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px"><code class="hljs cs" style="margin: 0px 2px; line-height: 15px; font-size: 11px; font-weight: normal; word-spacing: -3px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; color: rgb(169, 183, 198); background: rgb(40, 43, 46); overflow-x: auto; padding: 0.5em; display: block !important; white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important"><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); padding-right: 20px; word-spacing: 0px; word-wrap: inherit !important; word-break: inherit !important">1</span>&nbsp;&nbsp;&nbsp;&nbsp;git&nbsp;<span class="hljs-keyword" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important">add</span>&nbsp;app<br></code></pre><br><p style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px">一次性把所有文件都添加，可以输入</p><br><pre style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px"><code class="hljs cs" style="margin: 0px 2px; line-height: 15px; font-size: 11px; font-weight: normal; word-spacing: -3px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; color: rgb(169, 183, 198); background: rgb(40, 43, 46); overflow-x: auto; padding: 0.5em; display: block !important; white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important"><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); padding-right: 20px; word-spacing: 0px; word-wrap: inherit !important; word-break: inherit !important">1</span>&nbsp;&nbsp;&nbsp;&nbsp;git&nbsp;<span class="hljs-keyword" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important">add</span>&nbsp;.<br></code></pre><br><p style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px">添加好之后，我们来提交下</p><br><pre style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px"><code class="hljs nginx" style="margin: 0px 2px; line-height: 15px; font-size: 11px; font-weight: normal; word-spacing: -3px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; color: rgb(169, 183, 198); background: rgb(40, 43, 46); overflow-x: auto; padding: 0.5em; display: block !important; white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important"><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); padding-right: 20px; word-spacing: 0px; word-wrap: inherit !important; word-break: inherit !important">1</span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-attribute" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important">git</span>&nbsp;commit&nbsp;-m&nbsp;<span class="hljs-string" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important">“First&nbsp;commit.”</span><br></code></pre><br><p style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px">注意，在commit命令的后面，我们一定要通过-m参数来加上提交的描述信息，没有描述信息的提交被认为是部合法的。</p><br><h2 id="h-3" style="color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.4em"><span style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px">忽略文件</span></h2><br><p style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px">Git提供了一种可配性很强的机制来允许用户将制定的文件或目录排除在版本控制之外，它会检查代码仓库的目录下是否存在一个名为.gitignore的文件，如果存在的话，就去一行行读取这个文件中的内容，并把每一行指定的文件或目录排除在版本控制之外，注意，.gitignore中指定的文件或目录可以使用“<em>”通配符的<br>方便的是Android Studio自动生成<br>由于app模块下面基本都是我们编写的代码，因此默认情况下只有其中的build目录不会被添加到版本控制当中。<br>我们可以对以上文件夹进行任意的修改，满足特定的需求，比如，app模块下面的所有测试文件都只是给我自己使用的，可以不把他们添加到版本控制中，那么可以修改app/.gitignore文件</em></p><br><pre style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px"><code class="hljs bash" style="margin: 0px 2px; line-height: 15px; font-size: 11px; font-weight: normal; word-spacing: -3px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; color: rgb(169, 183, 198); background: rgb(40, 43, 46); overflow-x: auto; padding: 0.5em; display: block !important; white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important"><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); padding-right: 20px; word-spacing: 0px; word-wrap: inherit !important; word-break: inherit !important">1</span>&nbsp;&nbsp;&nbsp;&nbsp;/build<br><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); padding-right: 20px; word-spacing: 0px; word-wrap: inherit !important; word-break: inherit !important">2</span>&nbsp;&nbsp;&nbsp;&nbsp;/src/<span class="hljs-built_in" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important">test</span><br><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); padding-right: 20px; word-spacing: 0px; word-wrap: inherit !important; word-break: inherit !important">3</span>&nbsp;&nbsp;&nbsp;&nbsp;/src/androidTest<br></code></pre><br><p style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px">然后提交代码，先添加进仓库<code style="font-size: inherit; line-height: inherit; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248)">git add .</code>再使用commit命令提交<code style="font-size: inherit; line-height: inherit; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248)">git commit -m “First commit”</code></p><br><h2 id="h-4" style="color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.4em"><span style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px">查看修改内容</span></h2><br><p style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px">在进行了第一次代码提交后，我们后面还可能会对项目不断的进行维护或添加新功能。查看文件修改情况非常简单，只需要使用status命令就可以了。在项目根目录下输入</p><br><pre style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px"><code class="hljs nginx" style="margin: 0px 2px; line-height: 15px; font-size: 11px; font-weight: normal; word-spacing: -3px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; color: rgb(169, 183, 198); background: rgb(40, 43, 46); overflow-x: auto; padding: 0.5em; display: block !important; white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important"><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); padding-right: 20px; word-spacing: 0px; word-wrap: inherit !important; word-break: inherit !important">1</span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-attribute" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important">git</span>&nbsp;status<br></code></pre><br><p style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px">此时git会提醒我们某个文件发生了更改，但是如果才能查看更改的内容呢，这需要使用diff命令</p><br><pre style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px"><code class="hljs nginx" style="margin: 0px 2px; line-height: 15px; font-size: 11px; font-weight: normal; word-spacing: -3px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; color: rgb(169, 183, 198); background: rgb(40, 43, 46); overflow-x: auto; padding: 0.5em; display: block !important; white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important"><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); padding-right: 20px; word-spacing: 0px; word-wrap: inherit !important; word-break: inherit !important">1</span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-attribute" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important">git</span>&nbsp;diff<br></code></pre><br><p style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px">如果只是想查看某个文件的更改内容，则可以这样输入</p><br><pre style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px"><code class="hljs nginx" style="margin: 0px 2px; line-height: 15px; font-size: 11px; font-weight: normal; word-spacing: -3px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; color: rgb(169, 183, 198); background: rgb(40, 43, 46); overflow-x: auto; padding: 0.5em; display: block !important; white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important"><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); padding-right: 20px; word-spacing: 0px; word-wrap: inherit !important; word-break: inherit !important">1</span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-attribute" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important">git</span>&nbsp;diff&nbsp;xxx/xxx/xxx<br></code></pre><br><p style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px">其中减号代表删除的部分，加号代表添加的部分。</p><br><h2 id="h-5" style="color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.4em"><span style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px">撤销未提交的修改</span></h2><br><p style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px">有时候我们的代码可能会写的过于草率，以至于原本正常的功能，结果反倒被我们修改出了问题，此时如果代码还未提交，所修改的内容都是可以撤销的</p><br><ol style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: decimal"><br><li style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em"><span style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px">代码还未add的情况下，使用checkout命令来撤销某个文件下的修改</span></li><br></ol><br><pre style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px"><code class="hljs nginx" style="margin: 0px 2px; line-height: 15px; font-size: 11px; font-weight: normal; word-spacing: -3px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; color: rgb(169, 183, 198); background: rgb(40, 43, 46); overflow-x: auto; padding: 0.5em; display: block !important; white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important"><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); padding-right: 20px; word-spacing: 0px; word-wrap: inherit !important; word-break: inherit !important">1</span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-attribute" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important">git</span>&nbsp;checkout&nbsp;xxx/xxx/xxx<br></code></pre><br><p style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px">然后使用<code style="font-size: inherit; line-height: inherit; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248)">git status</code>命令来检查下，看是否撤销成功；</p><br><ol start="2" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: decimal"><br><li style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em"><span style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px">如果代码已经add，那么使用checkout命令无效，这个时候我们需要先取消添加，即使用reset命令</span></li><br></ol><br><pre style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px"><code class="hljs sql" style="margin: 0px 2px; line-height: 15px; font-size: 11px; font-weight: normal; word-spacing: -3px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; color: rgb(169, 183, 198); background: rgb(40, 43, 46); overflow-x: auto; padding: 0.5em; display: block !important; white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important"><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); padding-right: 20px; word-spacing: 0px; word-wrap: inherit !important; word-break: inherit !important">1</span>&nbsp;&nbsp;&nbsp;&nbsp;git&nbsp;<span class="hljs-keyword" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important">reset</span>&nbsp;<span class="hljs-keyword" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important">HEAD</span>&nbsp;xxx/xxxx/xxx<br></code></pre><br><p style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px">然后再使用checkout命令</p><br><h2 id="h-6" style="color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.4em"><span style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px">查看提交记录</span></h2><br><p style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px">使用log命令可以查看历史提交信息</p><br><pre style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px"><code class="hljs bash" style="margin: 0px 2px; line-height: 15px; font-size: 11px; font-weight: normal; word-spacing: -3px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; color: rgb(169, 183, 198); background: rgb(40, 43, 46); overflow-x: auto; padding: 0.5em; display: block !important; white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important"><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); padding-right: 20px; word-spacing: 0px; word-wrap: inherit !important; word-break: inherit !important">1</span>&nbsp;&nbsp;&nbsp;&nbsp;git&nbsp;<span class="hljs-built_in" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important">log</span><br></code></pre><br><p style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px">当提交记录很多，我们只想查看其中一条记录，可以在命令中指定该记录的id，并加上-1参数表示我们只想看到一行记录。</p><br><pre style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px"><code class="hljs bash" style="margin: 0px 2px; line-height: 15px; font-size: 11px; font-weight: normal; word-spacing: -3px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; color: rgb(169, 183, 198); background: rgb(40, 43, 46); overflow-x: auto; padding: 0.5em; display: block !important; white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important"><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); padding-right: 20px; word-spacing: 0px; word-wrap: inherit !important; word-break: inherit !important">1</span>&nbsp;&nbsp;&nbsp;&nbsp;git&nbsp;<span class="hljs-built_in" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important">log</span>&nbsp;xxxxxxxxxx&nbsp;-1<br></code></pre><br><p style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px">而如果想要查看这条提交记录具体修改了什么内容，可以在命令中加入-p参数</p><br><pre style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px"><code class="hljs bash" style="margin: 0px 2px; line-height: 15px; font-size: 11px; font-weight: normal; word-spacing: -3px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; color: rgb(169, 183, 198); background: rgb(40, 43, 46); overflow-x: auto; padding: 0.5em; display: block !important; white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important"><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); padding-right: 20px; word-spacing: 0px; word-wrap: inherit !important; word-break: inherit !important">1</span>&nbsp;&nbsp;&nbsp;&nbsp;git&nbsp;<span class="hljs-built_in" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important">log</span>&nbsp;xxxxxxxxxx&nbsp;-1&nbsp;-p<br></code></pre><br><p style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px">减号代表删除的部分，加号代表添加的部分</p><br><h2 id="h-7" style="color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.4em"><span style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px">分支的用法</span></h2><br><p style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px">查看当前版本库中的分支，使用branch命令</p><br><pre style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px"><code class="hljs nginx" style="margin: 0px 2px; line-height: 15px; font-size: 11px; font-weight: normal; word-spacing: -3px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; color: rgb(169, 183, 198); background: rgb(40, 43, 46); overflow-x: auto; padding: 0.5em; display: block !important; white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important"><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); padding-right: 20px; word-spacing: 0px; word-wrap: inherit !important; word-break: inherit !important">1</span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-attribute" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important">git</span>&nbsp;branch<br></code></pre><br><p style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px">创建分支</p><br><pre style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px"><code class="hljs css" style="margin: 0px 2px; line-height: 15px; font-size: 11px; font-weight: normal; word-spacing: -3px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; color: rgb(169, 183, 198); background: rgb(40, 43, 46); overflow-x: auto; padding: 0.5em; display: block !important; white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important"><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); padding-right: 20px; word-spacing: 0px; word-wrap: inherit !important; word-break: inherit !important">1</span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-selector-tag" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important">git</span>&nbsp;<span class="hljs-selector-tag" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important">branch</span>&nbsp;<span class="hljs-selector-tag" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important">version1</span><span class="hljs-selector-class" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(165, 218, 45); word-wrap: inherit !important; word-break: inherit !important">.0</span><br></code></pre><br><p style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px">这样就创建了一个名为version1.0的分支，再次使用branch命令查看，发现master分支前面有一个号，说明我们的代码还是在master分支上，如何切换分支，则需要用到checkout命令，即</p><br><pre style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px"><code class="hljs css" style="margin: 0px 2px; line-height: 15px; font-size: 11px; font-weight: normal; word-spacing: -3px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; color: rgb(169, 183, 198); background: rgb(40, 43, 46); overflow-x: auto; padding: 0.5em; display: block !important; white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important"><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); padding-right: 20px; word-spacing: 0px; word-wrap: inherit !important; word-break: inherit !important">1</span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-selector-tag" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important">git</span>&nbsp;<span class="hljs-selector-tag" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important">checkout</span>&nbsp;<span class="hljs-selector-tag" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important">version1</span><span class="hljs-selector-class" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(165, 218, 45); word-wrap: inherit !important; word-break: inherit !important">.0</span><br></code></pre><br><p style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px">不同分支之前的修改不会相互影响，因此如果在一个分支上修改了bug，我们需要使用merge命令来完成合并操作，即</p><br><pre style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px"><code class="hljs css" style="margin: 0px 2px; line-height: 15px; font-size: 11px; font-weight: normal; word-spacing: -3px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; color: rgb(169, 183, 198); background: rgb(40, 43, 46); overflow-x: auto; padding: 0.5em; display: block !important; white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important"><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); padding-right: 20px; word-spacing: 0px; word-wrap: inherit !important; word-break: inherit !important">1</span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-selector-tag" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important">git</span>&nbsp;<span class="hljs-selector-tag" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important">checkout</span>&nbsp;<span class="hljs-selector-tag" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important">master</span><br><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); padding-right: 20px; word-spacing: 0px; word-wrap: inherit !important; word-break: inherit !important">2</span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-selector-tag" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important">git</span>&nbsp;<span class="hljs-selector-tag" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important">merge</span>&nbsp;<span class="hljs-selector-tag" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important">version1</span><span class="hljs-selector-class" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(165, 218, 45); word-wrap: inherit !important; word-break: inherit !important">.0</span><br></code></pre><br><p style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px">这样就可以把version1.0分支上修改并提交的内容合并到master分支上了，当然，在合并分支的时候，还有可能会出现代码冲突的情况，这个时候需要自己耐心排查解决这些问题。<br>最后，不需要某个分支的时候，使用如下命令删除分支</p><br><pre style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px"><code class="hljs css" style="margin: 0px 2px; line-height: 15px; font-size: 11px; font-weight: normal; word-spacing: -3px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; color: rgb(169, 183, 198); background: rgb(40, 43, 46); overflow-x: auto; padding: 0.5em; display: block !important; white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important"><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); padding-right: 20px; word-spacing: 0px; word-wrap: inherit !important; word-break: inherit !important">1</span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-selector-tag" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important">git</span>&nbsp;<span class="hljs-selector-tag" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important">branch</span>&nbsp;<span class="hljs-selector-tag" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important">-D</span>&nbsp;<span class="hljs-selector-tag" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important">version1</span><span class="hljs-selector-class" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(165, 218, 45); word-wrap: inherit !important; word-break: inherit !important">.0</span><br></code></pre><br><h2 id="h-8" style="color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.4em"><span style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px">与远程版本库协作</span></h2><br><p style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px">如何使用Git进行团队合作开发呢，这就需要有一个远程的版本库，团队的每个成员都从这个版本库中获取最原始的代码，然后各自进行开发，并且以后每次提交的代码都同步到远程版本库上就可以了。另外团队中的每个成员最好都要养成经常从版本库中获取最新代码的习惯。不然大家的代码很有可能经常会出现冲突；</p><br><ol style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: decimal"><br><li style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em"><span style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px">比如现在有一个远程版本库的Git地址是<a href="https://github.com/example/test.git,就可以使用如下命令将代码下载到本地" target="_blank" rel="noopener">https://github.com/example/test.git,就可以使用如下命令将代码下载到本地</a></span></li><br></ol><br><pre style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px"><code class="hljs nginx" style="margin: 0px 2px; line-height: 15px; font-size: 11px; font-weight: normal; word-spacing: -3px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; color: rgb(169, 183, 198); background: rgb(40, 43, 46); overflow-x: auto; padding: 0.5em; display: block !important; white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important"><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); padding-right: 20px; word-spacing: 0px; word-wrap: inherit !important; word-break: inherit !important">1</span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-attribute" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important">git</span>&nbsp;clone&nbsp;<a href="https://github.com/example/test.git" target="_blank" rel="noopener">https://github.com/example/test.git</a><br></code></pre><br><p style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px">之后你在这份代码的基础上进行了一些修改和提交，需要使用push命令来将本地修改的内容同步到远程版本库上。</p><br><pre style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px"><code class="hljs nginx" style="margin: 0px 2px; line-height: 15px; font-size: 11px; font-weight: normal; word-spacing: -3px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; color: rgb(169, 183, 198); background: rgb(40, 43, 46); overflow-x: auto; padding: 0.5em; display: block !important; white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important"><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); padding-right: 20px; word-spacing: 0px; word-wrap: inherit !important; word-break: inherit !important">1</span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-attribute" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important">git</span>&nbsp;push&nbsp;origin&nbsp;master<br></code></pre><br><p style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px">其中origin部分指定的是远程版本库的git地址，master部分指定的是同步到哪一个分支上，上述命令就完成了将本地代码同步到该版本库的master分支上的功能；</p><br><ol start="2" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: decimal"><br><li style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em">知道了将本地的修改同步到远程版本库的方法，接下来看我们如何将远程版本库上的修改同步到本地。Git提供了两种命令来完成此功能。fetch和pull。fetch语法规则和push差不多，<code style="font-size: inherit; line-height: inherit; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248)">git fetch origin master</code>，执行这个命令后，就会将远程版本库上的代码同步到本地，不过同步下来的代码并不会合并到任何分支上去，而是会存在到一个origin/master分支上，这时候我们可以使用diff命令查看远程版本库到底修改了哪些东西<code style="font-size: inherit; line-height: inherit; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248)">git diff origin/master</code>，之后再调用merge命令将origin/master分支上的修改合并到主分支上即可<code style="font-size: inherit; line-height: inherit; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248)">git merge origin/master</code>,而pull命令相当于将fetch命令和merge命令放在一起执行了，即从远程版本库获取最新的代码并合并到本地<code style="font-size: inherit; line-height: inherit; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248)">git pull origin master</code></li><br></ol></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;div class=&quot;output_wrapper&quot; id=&quot;output_wrapper_id&quot; style=&quot;font-size: 15px; color: rgb(62, 62, 62); line-height: 1.8; word-spacing: 2px; lett
      
    
    </summary>
    
      <category term="Git" scheme="http://allenlucas.ml/categories/Git/"/>
    
    
  </entry>
  
  <entry>
    <title>网络通信原理-我所见</title>
    <link href="http://allenlucas.ml/2018/08/08/%E7%BD%91%E7%BB%9C%E9%80%9A%E4%BF%A1%E5%8E%9F%E7%90%86-%E6%88%91%E6%89%80%E8%A7%81/"/>
    <id>http://allenlucas.ml/2018/08/08/网络通信原理-我所见/</id>
    <published>2018-08-08T02:35:21.000Z</published>
    <updated>2021-06-18T05:18:28.317Z</updated>
    
    <content type="html"><![CDATA[<div class="output_wrapper" id="output_wrapper_id" style="font-size: 15px; color: rgb(62, 62, 62); line-height: 1.8; word-spacing: 2px; letter-spacing: 2px; font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; background-image: linear-gradient(90deg, rgba(50, 0, 0, 0.05) 3%, rgba(0, 0, 0, 0) 3%), linear-gradient(360deg, rgba(50, 0, 0, 0.05) 3%, rgba(0, 0, 0, 0) 3%); background-size: 20px 20px; background-position: center center"><p style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px">之前对于互联网的一些基础知识只停留在死记硬背，是处于被动应付的一种状态，今天看了 阮一峰老师的 《互联网协议入门》，感觉像是打开了新世界的大门，很多之前不理解为什么这样做的，瞬间豁然开朗起来。<br>文章的链接：<a href="http://www.ruanyifeng.com/blog/2012/05/internet_protocol_suite_part_i.html" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; text-decoration: none; color: rgb(30, 107, 184); word-wrap: break-word" target="_blank" rel="noopener">互联网协议入门</a></p><br><blockquote style="line-height: inherit; display: block; padding: 15px 15px 15px 1rem; font-size: 0.9em; margin: 1em 0px; color: rgb(0, 0, 0); border-left: 5px solid rgb(239, 112, 96); background: rgb(239, 235, 233); overflow: auto; word-wrap: normal; word-break: normal"><br>  <p style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 0px">知之为知之,不知为不知,是知也.</p><br></blockquote><br><h1 id="hositcpip" style="color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.6em"><span style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px">OSI七层协议模型、TCP/IP四层模型和五层协议体系结构之间的关系</span></h1><br><ol style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: decimal"><br><li style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em">OSI七层模型：<ol style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: decimal"><br><li style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em"><span style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px">应用层</span></li><br><li style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em"><span style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px">表示层</span></li><br><li style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em"><span style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px">会话层</span></li><br><li style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em"><span style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px">传输层</span></li><br><li style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em"><span style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px">网络层</span></li><br><li style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em"><span style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px">数据链路层</span></li><br><li style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em"><span style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px">物理层</span></li></ol></li><br><li style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em">TCP/IP四层模型<ol style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: decimal"><br><li style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em"><span style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px">应用层</span></li><br><li style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em"><span style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px">传输层</span></li><br><li style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em"><span style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px">网际层</span></li><br><li style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em"><span style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px">网络接口层</span></li></ol></li><br><li style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em">五层体系结构<ol style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: decimal"><br><li style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em"><span style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px">应用层</span></li><br><li style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em"><span style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px">传输层</span></li><br><li style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em"><span style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px">网络层</span></li><br><li style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em"><span style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px">链接层</span></li><br><li style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em"><span style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px">实体层</span></li></ol></li><br><li style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em">对应关系<br><figure style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px"><img src="http://pctoyk71k.bkt.clouddn.com/20170822222325781.png" alt="三种模型结构关系" title="三种模型结构关系" style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%"><figcaption style="line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em">三种模型结构关系</figcaption></figure><br>图片来自于<a href="https://blog.csdn.net/SilenceOO/article/details/77489088" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; text-decoration: none; color: rgb(30, 107, 184); word-wrap: break-word" target="_blank" rel="noopener">PennTsui的博客</a></li><br></ol><br><h1 id="h" style="color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.6em"><span style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px">层与协议</span></h1><br><p style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px">每一层都是为了完成一种功能，为了实现这些功能，就需要遵守共同的规则，这个需要遵守的规则，就叫做协议</p><br><h1 id="h-1" style="color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.6em"><span style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px">五层体系结构</span></h1><br><figure style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px"><img src="http://www.ruanyifeng.com/blogimg/asset/201205/bg2012052902.png" alt="五层体系结构" title="五层体系结构" style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%"><figcaption style="line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em">五层体系结构</figcaption></figure><br>越下面的层，越靠近硬件；越上面的层，越靠近用户。<p style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px"></p><br><h2 id="h-2" style="color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.4em"><span style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px">实体层</span></h2><br><figure style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px"><img src="http://pctoyk71k.bkt.clouddn.com/bg2012052903.png" alt="实体层，将电脑连接起来" title="实体层，将电脑连接起来" style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%"><figcaption style="line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em">实体层，将电脑连接起来</figcaption></figure><br>把电脑连接起来的物理手段，主要规定了网络的一些电气特性，作用是负责传送0和1的电信号。<p style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px"></p><br><h2 id="h-3" style="color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.4em"><span style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px">链接层</span></h2><br><h3 id="h-4" style="color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; border-bottom: 2px solid rgb(239, 112, 96); font-size: 1.3em"><span style="font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(239, 112, 96); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px">定义</span><span style="display: inline-block; vertical-align: bottom; border-bottom: 36px solid rgb(239, 235, 233); border-right: 20px solid transparent"> </span></h3><br><p style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px">单纯的0和1没有任何意义，必须规定解读方式：多少个电信号算一组？每个信号位有何意义？<br>这就是链接层的功能，在实体层的上方，确定了0和1的分组方式</p><br><h3 id="h-5" style="color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; border-bottom: 2px solid rgb(239, 112, 96); font-size: 1.3em"><span style="font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(239, 112, 96); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px">以太网协议</span><span style="display: inline-block; vertical-align: bottom; border-bottom: 36px solid rgb(239, 235, 233); border-right: 20px solid transparent"> </span></h3><br><p style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px">以太网规定，一组电信号构成一个数据包，叫做帧，每一帧分为两个部分：标头和数据</p><figure style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px"><img src="http://www.ruanyifeng.com/blogimg/asset/201205/bg2012052904.png" alt="以太网数据包组成" title="以太网数据包组成" style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%"><figcaption style="line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em">以太网数据包组成</figcaption></figure><br>标头包含数据包的一些说明项，比如发送者，接收者，数据类型等，数据是数据包的具体内容<p style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px"></p><br><h3 id="hmac" style="color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; border-bottom: 2px solid rgb(239, 112, 96); font-size: 1.3em"><span style="font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(239, 112, 96); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px">MAC地址</span><span style="display: inline-block; vertical-align: bottom; border-bottom: 36px solid rgb(239, 235, 233); border-right: 20px solid transparent"> </span></h3><br><p style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px">以太网数据包的标头中的发送者和接收者如何标识？<br>以太网规定，连入网络的所有设备，都必须具有网卡接口，数据包必须是从一块网卡，传送到另一块网卡。网卡的地址，就是数据包的发送地址和接收地址，这叫做MAC地址。每块网卡出厂的时候，都有一个全世界独一无二的MAC地址</p><br><h3 id="h-6" style="color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; border-bottom: 2px solid rgb(239, 112, 96); font-size: 1.3em"><span style="font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(239, 112, 96); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px">广播</span><span style="display: inline-block; vertical-align: bottom; border-bottom: 36px solid rgb(239, 235, 233); border-right: 20px solid transparent"> </span></h3><br><p style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px">有了MAC地址，系统怎么样才能将数据包准确送到接收方？<br>以太网采用了一个很原始的方式，它不是把数据包准确发送到接收方，而是向本网络内所有计算机发送，让每台计算机自己判断，将接收方的MAC地址与自己的MAC地址比较，如果相同，则是接收方，那么接收数据进行后续处理，如果不是，那么将该包丢弃</p><br><h2 id="h-7" style="color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.4em"><span style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px">网络层</span></h2><br><p style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px">以太网协议，依靠MAC地址发送数据，理论上，单单依靠MAC地址，就可以进行数据传送了，但这样有个重大的缺陷。以太网采用广播的形式发送数据包，会使得效率低下，而且局限在发送者所在的子网络。也就是说如果两台计算机不在同一个子网络，广播是传不过去的。<br>互联网是无数子网络共同组成的巨型网络。</p><figure style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px"><img src="http://pctoyk71k.bkt.clouddn.com/bg2012052914.png" alt="互联网中包含了无数的子网络" title="互联网中包含了无数的子网络" style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%"><figcaption style="line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em">互联网中包含了无数的子网络</figcaption></figure><br>因此需要有一种方法，区分MAC地址是否属于同一子网络，是，那么采用广播方式发送，不是，就采用路由的方式发送（路由的意思，就是指如何向不同的子网络分发数据包），MAC地址本身无法做到这一点，它只能识别是哪个厂家生产的，而不能识别当前所处的网络。<br><strong style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0)">这就导致了网络层的诞生，作用是引进一套新的地址，使得我们能够区分不同的计算机是否属于同一个子网络，这套地址就叫做网络地址，简称网址</strong><br>网络层出现后，每台计算机有了两种地址，MAC地址和网络地址，两者之间没有任何联系，是独立的两个体系。<br>从作用上来看，是先处理网络地址，再处理MAC地址。<p style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px"></p><br><h3 id="hip" style="color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; border-bottom: 2px solid rgb(239, 112, 96); font-size: 1.3em"><span style="font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(239, 112, 96); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px">IP协议</span><span style="display: inline-block; vertical-align: bottom; border-bottom: 36px solid rgb(239, 235, 233); border-right: 20px solid transparent"> </span></h3><br><p style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px">规定网络地址的协议，叫做IP协议，所定义的地址，被称为IP地址。<br>作用主要有两个<br>    1. 为每台计算机分配IP地址<br>    2. 确定哪些地址再同一个子网络</p><br><h3 id="hip-1" style="color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; border-bottom: 2px solid rgb(239, 112, 96); font-size: 1.3em"><span style="font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(239, 112, 96); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px">IP数据包</span><span style="display: inline-block; vertical-align: bottom; border-bottom: 36px solid rgb(239, 235, 233); border-right: 20px solid transparent"> </span></h3><br><p style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px">根据IP协议发送的数据，就叫做IP数据包，其中包含了IP地址信息。IP数据包的组成：</p><figure style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px"><img src="http://www.ruanyifeng.com/blogimg/asset/201205/bg2012052909.png" alt="IP数据包的组成" title="IP数据包的组成" style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%"><figcaption style="line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em">IP数据包的组成</figcaption></figure>，将IP数据包存放在以太网数据包的数据部分<figure style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px"><img src="http://www.ruanyifeng.com/blogimg/asset/201205/bg2012052910.png" alt="加入IP数据包的以太网数据包" title="加入IP数据包的以太网数据包" style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%"><figcaption style="line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em">加入IP数据包的以太网数据包</figcaption></figure><br><h3 id="harp" style="color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; border-bottom: 2px solid rgb(239, 112, 96); font-size: 1.3em"><span style="font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(239, 112, 96); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px">ARP协议</span><span style="display: inline-block; vertical-align: bottom; border-bottom: 36px solid rgb(239, 235, 233); border-right: 20px solid transparent"> </span></h3><br><p style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px">IP数据包时放在以太网数据包里发送的，所以我们必须同时知道两个地址，一个是对方的MAC地址，另一个时对方的IP地址，通常情况下，对方的IP地址时已知的，但是MAC是不知道的，我们需要一种机制，通过IP地址得到MAC地址。<br>这里分两种情况：<br>    1. 两台主机不在同一个子网络，事实上没有办法得到对方的MAC地址，只能把数据包传送到两个子网络连接处的网关，让网关去处理<br>    2. 两台计算机在同一个子网络，使用ARP协议，发出一个数据包，其中包含所要查询的主机IP，在对方MAC地址栏中填写的时FF:FF:FF:FF:FF:FF，表示这是一个广播地址，它所在子网络的每一台主机都会收到这个数据包，从中去除IP地址，与自身IP地址进行比较，如果相同，那么做出回应，向对方报告自己的MAC地址，否则就丢弃这个包</p><br><h3 id="h-8" style="color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; border-bottom: 2px solid rgb(239, 112, 96); font-size: 1.3em"><span style="font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(239, 112, 96); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px">传输层</span><span style="display: inline-block; vertical-align: bottom; border-bottom: 36px solid rgb(239, 235, 233); border-right: 20px solid transparent"> </span></h3><br><p style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px">有了MAC地址和IP地址，我们可以在互联网上任意两台主机上建立通信，但是问题是许多程序都需要网络，如何来正确的分辨是哪个程序需要的数据包？这里我们还需要一个参数，用来判断供哪个程序使用，这个参数就叫做端口，其实是每个程序编号，每个数据包都发到主机的特定端口，所以不同的程序就能取到自己所需要的数据。</p><br><p style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px"><strong style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0)">传输层的功能就是建立端口到端口的通信，相比之下，网络层的功能是建立主机到主机的通信。只要确定主机和端口，我们就能实现程序之间的交流。</strong>因此，Unix系统就把主机+端口叫做Socket。</p><br><h3 id="hudp" style="color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; border-bottom: 2px solid rgb(239, 112, 96); font-size: 1.3em"><span style="font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(239, 112, 96); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px">UDP协议</span><span style="display: inline-block; vertical-align: bottom; border-bottom: 36px solid rgb(239, 235, 233); border-right: 20px solid transparent"> </span></h3><br><p style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px">我们需要在数据包中加入端口信息，这就需要加入新的协议，最简单的实现叫做UDP协议，数据包也是标头和数据两部分</p><figure style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px"><img src="http://www.ruanyifeng.com/blogimg/asset/201205/bg2012052911.png" alt="UDP数据包组成" title="UDP数据包组成" style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%"><figcaption style="line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em">UDP数据包组成</figcaption></figure><br>加入UDP协议的的以太网数据包<figure style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px"><img src="http://www.ruanyifeng.com/blogimg/asset/201205/bg2012052912.png" alt="使用UDP协议的以太网数据包组成" title="使用UDP协议的以太网数据包组成" style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%"><figcaption style="line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em">使用UDP协议的以太网数据包组成</figcaption></figure><br><h3 id="htcp" style="color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; border-bottom: 2px solid rgb(239, 112, 96); font-size: 1.3em"><span style="font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(239, 112, 96); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px">TCP协议</span><span style="display: inline-block; vertical-align: bottom; border-bottom: 36px solid rgb(239, 235, 233); border-right: 20px solid transparent"> </span></h3><br><p style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px">UDP协议优点比较简单，容易实现，但是可靠性较差，一旦数据包发出，无法知道对方是否收到。为解决这个问题，TCP协议诞生了。这个协议非常复杂，可以近似认为，是有确认机制的UDP协议，没发出一个数据包都要求确认，如果一个数据包丢失，就收不到确认，发出方就知道有必要重发这个数据包。<strong style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0)">因此TCP协议能够保证数据不会遗失，但缺点是过程复杂，实现困难，消耗较多的资源</strong></p><br><h2 id="h-9" style="color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.4em"><span style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px">应用层</span></h2><br><p style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px">作用就是规定应用程序的数据格式<br>这是最高的一层，直接面对用户，他的数据就放在TCP数据包的数据部分，因此现在的以太网数据包就变成下面这样。</p><figure style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px"><img src="http://www.ruanyifeng.com/blogimg/asset/201205/bg2012052913.png" alt="比较完整的以太网数据包" title="比较完整的以太网数据包" style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%"><figcaption style="line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em">比较完整的以太网数据包</figcaption></figure></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;div class=&quot;output_wrapper&quot; id=&quot;output_wrapper_id&quot; style=&quot;font-size: 15px; color: rgb(62, 62, 62); line-height: 1.8; word-spacing: 2px; lett
      
    
    </summary>
    
      <category term="互联网那点事儿" scheme="http://allenlucas.ml/categories/%E4%BA%92%E8%81%94%E7%BD%91%E9%82%A3%E7%82%B9%E4%BA%8B%E5%84%BF/"/>
    
    
  </entry>
  
  <entry>
    <title>心情随想，8.6</title>
    <link href="http://allenlucas.ml/2018/08/06/%E5%BF%83%E6%83%85%E9%9A%8F%E6%83%B3%EF%BC%8C8.6/"/>
    <id>http://allenlucas.ml/2018/08/06/心情随想，8.6/</id>
    <published>2018-08-06T01:59:21.000Z</published>
    <updated>2021-06-18T05:18:28.316Z</updated>
    
    <content type="html"><![CDATA[<p>8月，真的是飘摇的一个月，出现了各种问题，公司也有大的人事变动，我不太确定未来会怎么样，我想我会做好我自己。</p><blockquote><p>林中多歧路，殊途同归</p></blockquote><p>上周的最后一天，发生了太多我想不到的事，可能提前早已有预兆，但是我却没发现吧。未来变化很大，谁也无法确信自己的路，重要的，是做好我们自己。他强任他强，清风拂山岗，这就是我的人生态度。糊里糊涂说了这么多，自己都不知道在干嘛。新的一周开始了，振作，奋斗，只要自己足够强大，就好。<br>周末去看了《风语咒》，感觉国漫还是有人才的，还是有高水平的作品的，虽然剧情比较老套，但是真的很让人感同身受。朗明的痞里痞气，苏兮纵使身处邪恶，内心依然透露出来的善良，这些真的都非常吸引我。到现在还有点入戏ing。<br>这周的工作可能会比较轻松点，准备把Android的知识再去掌握掌握，然后再继续学习学习Pyhton，充实自己吧，就算事情有变，人事调动，也可以从容应对。</p><p><img src="https://source.unsplash.com/daily" alt="早安"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;8月，真的是飘摇的一个月，出现了各种问题，公司也有大的人事变动，我不太确定未来会怎么样，我想我会做好我自己。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;林中多歧路，殊途同归&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;上周的最后一天，发生了太多我想不到的事，可能提前早已有预兆，
      
    
    </summary>
    
      <category term="随笔" scheme="http://allenlucas.ml/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
  </entry>
  
  <entry>
    <title>人生苦短，我用Python，始于八月。</title>
    <link href="http://allenlucas.ml/2018/08/01/%E4%BA%BA%E7%94%9F%E8%8B%A6%E7%9F%AD%EF%BC%8C%E6%88%91%E7%94%A8Python%EF%BC%8C%E5%A7%8B%E4%BA%8E%E5%85%AB%E6%9C%88%E3%80%82/"/>
    <id>http://allenlucas.ml/2018/08/01/人生苦短，我用Python，始于八月。/</id>
    <published>2018-08-01T03:28:19.000Z</published>
    <updated>2021-06-18T05:18:28.315Z</updated>
    
    <content type="html"><![CDATA[<div class="output_wrapper" id="output_wrapper_id" style="font-size: 16px; color: rgb(62, 62, 62); line-height: 1.6; word-spacing: 0px; letter-spacing: 0px; font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif"><p style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px">眨眼，七月已经过去，算算日子，18年也已过半。想想年初的目标，再看看自身的成长，决定不能再这么下去了。今天正好是8月1日，决定从今天开始，入坑Python。</p><br><blockquote style="line-height: inherit; display: block; padding: 15px 15px 15px 1rem; font-size: 0.9em; margin: 1em 0px; color: rgb(129, 145, 152); border-left: 6px solid rgb(220, 230, 240); background: rgb(242, 247, 251); overflow: auto; word-wrap: normal; word-break: normal"><br>  <p style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 0px">人生苦短，我用Pyhton</p><br></blockquote><br><h1 id="h" style="color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px; font-weight: bold; font-size: 1.6em"><span style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px">入坑</span></h1><br><p style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px">这里特别感谢微信公众号 Python绿色通道</p><figure style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px"><img src="http://pctoyk71k.bkt.clouddn.com/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20180801114846.jpg" alt="Python绿色通道" title="Python绿色通道" style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%"><figcaption style="line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em">Python绿色通道</figcaption></figure><br>里面的Python技术文章对我帮助很大，让我很快速的入门。<p style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px"></p><br><h1 id="hpython" style="color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px; font-weight: bold; font-size: 1.6em"><span style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px">Python环境安装</span></h1><br><ol style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: decimal"><br><li style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em">下载安装Pytharm（jetbrains公司出品，对于使用AndroidStudio的我来说，这个比较熟悉）我下载的是专业版2018.2。<figure style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px"><img src="http://upload-images.jianshu.io/upload_images/1152061-d1c6c9303ad5b2c2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="选择Windows系统的专业版下载" title="选择Windows系统的专业版下载" style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%"><figcaption style="line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em">选择Windows系统的专业版下载</figcaption></figure><figure style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px"><img src="http://pctoyk71k.bkt.clouddn.com/20180201155637.jpg" alt="勾选644位及与.py后缀格式文件关联，如果电脑上没有JDK，勾选下方的按钮下载JRE" title="勾选644位及与.py后缀格式文件关联，如果电脑上没有JDK，勾选下方的按钮下载JRE" style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%"><figcaption style="line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em">勾选644位及与.py后缀格式文件关联，如果电脑上没有JDK，勾选下方的按钮下载JRE</figcaption></figure></li><br><li style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em">激活Pytharm<a href="https://www.imsxm.com/2018/07/idea-2018-1-5-crack-patcher.html" title="可能获得激活方法" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; text-decoration: none; color: rgb(30, 107, 184); word-wrap: break-word" target="_blank" rel="noopener">可在该处得到帮助</a></li><br><li style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em">下载Pyhton解释器<a href="https://www.python.org/" title="Pyhton官网" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; text-decoration: none; color: rgb(30, 107, 184); word-wrap: break-word" target="_blank" rel="noopener">Python官网</a>,我下载的是64位的window平台的，<figure style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px"><img src="http://pctoyk71k.bkt.clouddn.com/l.png" alt="安装Python" title="安装Python" style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%"><figcaption style="line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em">安装Python</figcaption></figure>记得勾选Add Python to PATH，如果在命令行输入python，<figure style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px"><img src="http://pctoyk71k.bkt.clouddn.com/l1.png" alt="命令行输入python" title="命令行输入python" style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%"><figcaption style="line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em">命令行输入python</figcaption></figure>出现上面的画面，说明Python安装成功。</li><br><li style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em"><span style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px">至此，Pyhton环境搭建完毕</span></li><br></ol><br><h1 id="hhelloworldpython" style="color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px; font-weight: bold; font-size: 1.6em"><span style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px">hello world python</span></h1><br><ol style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: decimal"><br><li style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em">新建项目<figure style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px"><img src="http://pctoyk71k.bkt.clouddn.com/20130718142301078.jpg" alt="新建一个Python项目" title="新建一个Python项目" style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%"><figcaption style="line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em">新建一个Python项目</figcaption></figure></li><br><li style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em">新建一个文件<figure style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px"><img src="http://pctoyk71k.bkt.clouddn.com/20130718142520187.jpg" alt="新建一个Python文件" title="新建一个Python文件" style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%"><figcaption style="line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em">新建一个Python文件</figcaption></figure></li><br><li style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em"><span style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px">进入编写页面</span></li><br></ol><br><pre style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px"><code class="python language-python hljs" style="margin: 0px 2px; line-height: 15px; font-size: 11px; font-weight: normal; word-spacing: -3px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; color: rgb(169, 183, 198); background: rgb(40, 43, 46); overflow-x: auto; padding: 0.5em; display: block !important; white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important"><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); padding-right: 20px; word-spacing: 0px; word-wrap: inherit !important; word-break: inherit !important">1</span>&nbsp;&nbsp;&nbsp;&nbsp;print(<span class="hljs-string" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important">“hello&nbsp;world&nbsp;by&nbsp;python!”</span>)<br></code></pre><br><figure style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px"><img src="http://pctoyk71k.bkt.clouddn.com/640.jpg" alt="图片与文中内容不一致" title="图片与文中内容不一致" style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%"><figcaption style="line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em">图片与文中内容不一致</figcaption></figure><br><div class="output_wrapper" id="output_wrapper_id" style="font-size: 15px; color: rgb(62, 62, 62); line-height: 1.8; word-spacing: 2px; letter-spacing: 2px; font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; background-image: linear-gradient(90deg, rgba(50, 0, 0, 0.05) 3%, rgba(0, 0, 0, 0) 3%), linear-gradient(360deg, rgba(50, 0, 0, 0.05) 3%, rgba(0, 0, 0, 0) 3%); background-size: 20px 20px; background-position: center center"><ol start="4" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: decimal"><br><li style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em">设置控制台<br>运行之前，我们发现快捷菜单上的【运行】和【调试】都是灰色的，不可触发状态。是因为，我们需要先配置一下控制台。<br>点击运行旁边的黑色倒三角，进入【Run/Debug Configurations】配置界面。（或者点击Run –&gt; Edit Configurations 也一样）<br><figure style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px"><img src="http://pctoyk71k.bkt.clouddn.com/20130718144343421.jpg" alt="进入【Run/Debug Configurations】配置界面" title="进入【Run/Debug Configurations】配置界面" style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%"><figcaption style="line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em">进入【Run/Debug Configurations】配置界面</figcaption></figure><br>在【Run/Debug Configurations】配置界面里，<br>点击绿色的加号，新建一个配置项，并选择python。（因为hello word 就是个python程序）<br><figure style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px"><img src="http://pctoyk71k.bkt.clouddn.com/20130718144841625.jpg" alt="新建一个配置项，并选择python" title="新建一个配置项，并选择python" style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%"><figcaption style="line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em">新建一个配置项，并选择python</figcaption></figure><br>在右边的配置界面里：<br>Name 一栏里写个名字，比如Hello<br>点击Scrip选项，找到刚才我们写的hello_word.py<br><figure style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px"><img src="http://pctoyk71k.bkt.clouddn.com/20130718145213312.jpg" alt="新建一个配置项，并选择python" title="新建一个配置项，并选择python" style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%"><figcaption style="line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em">新建一个配置项，并选择python</figcaption></figure><br>点击ok, 自动返回到编辑界面，这时候【运行】【调试】按钮全部变绿！<br><figure style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px"><img src="http://pctoyk71k.bkt.clouddn.com/20130718150729484.jpg" alt="新建一个配置项，并选择python" title="新建一个配置项，并选择python" style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%"><figcaption style="line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em">新建一个配置项，并选择python</figcaption></figure></li><br></ol></div><br><h1 id="h-1" style="color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px; font-weight: bold; font-size: 1.6em"><span style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px">总结</span></h1><br><p style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px">Pyhton的环境搭建还是比较简单快速的，通过这几个步骤，我就进入到了Pyhton的世界，其实很早之前就想学习下Python，但是1是没有合理的规划好时间，2是自己意志力不够坚定。现在随着博客的搭建，一切步入正轨，之前的很多想法但是没实现的，我都会一点点的去尝试下，然后再博客上记录下来。</p><br><blockquote style="line-height: inherit; display: block; padding: 15px 15px 15px 1rem; font-size: 0.9em; margin: 1em 0px; color: rgb(129, 145, 152); border-left: 6px solid rgb(220, 230, 240); background: rgb(242, 247, 251); overflow: auto; word-wrap: normal; word-break: normal"><br>  <p style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 0px">人生苦短，我用Python</p><br></blockquote></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;div class=&quot;output_wrapper&quot; id=&quot;output_wrapper_id&quot; style=&quot;font-size: 16px; color: rgb(62, 62, 62); line-height: 1.6; word-spacing: 0px; lett
      
    
    </summary>
    
      <category term="Python入门" scheme="http://allenlucas.ml/categories/Python%E5%85%A5%E9%97%A8/"/>
    
    
  </entry>
  
  <entry>
    <title>我的第一篇博客</title>
    <link href="http://allenlucas.ml/2018/07/26/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/"/>
    <id>http://allenlucas.ml/2018/07/26/我的第一篇博客/</id>
    <published>2018-07-26T06:17:01.000Z</published>
    <updated>2021-06-18T05:18:28.317Z</updated>
    
    <content type="html"><![CDATA[<p><del>这是我的第一篇博客。现在是测试</del><br><del>第二次修改</del></p><h1 id="正式书写了"><a href="#正式书写了" class="headerlink" title="正式书写了"></a>正式书写了</h1><p>很久之前就像写博客了，但是碍于当时眼见比较浅，觉得要自己写页面太麻烦便放弃了，使用过简书啊，csdn啊，写了一点点，但大部分都放弃了，可能不是自己辛苦创建的，没有体会到什么，所以用的不珍惜吧。这次这个站点是我看 <a href="http://wuxiaolong.me/" target="_blank" rel="noopener">吴小龙同学</a> 的知识星球才了解到，跟着一步步下来，申请免费域名，解析dns，使用hexo，每一个对我来说都是一个全新的尝试，再后面的配置hexo主题（精挑细选，选了next），再后来纠结评论功能啊，想了半天，最后使用了valine，个中酸甜苦辣自己知道，小站终于建起来了。可能我的小站没什么人气，没什么流量，但是我会像对自己的孩子一样，耐心的陪伴它。</p><blockquote><p>来吧，我们的目标是星辰大海</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;del&gt;这是我的第一篇博客。现在是测试&lt;/del&gt;&lt;br&gt;&lt;del&gt;第二次修改&lt;/del&gt;&lt;/p&gt;
&lt;h1 id=&quot;正式书写了&quot;&gt;&lt;a href=&quot;#正式书写了&quot; class=&quot;headerlink&quot; title=&quot;正式书写了&quot;&gt;&lt;/a&gt;正式书写了&lt;/h1&gt;&lt;p&gt;很久之前
      
    
    </summary>
    
      <category term="随笔" scheme="http://allenlucas.ml/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
  </entry>
  
</feed>
